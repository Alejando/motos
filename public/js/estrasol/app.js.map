{"version":3,"sources":["app.js","config.js","cotrollers/CatalogCtrl.js","cotrollers/ContentCtrl.js","cotrollers/HomeCtrl.js","cotrollers/MainCtrl.js","factories/ModelBase.js","factories/Models/Paginacion.js","factories/Models/SizeModel.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACpzYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC/BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"app.js","sourcesContent":["var setpoint = angular.module('setpoint', [\n    'ngRoute',\n    'datatables'\n]);\n//setpoint.constat('Config', {\n//    DATE_FORMAT : 'dd/MMMM/yyyy', //https://docs.angularjs.org/api/ng/filter/date\n//    HOUR_FORMAT : 'HH:mm:ss', \n//    DATE_SERVER_FORMAT : 'yyyy-MM-ddTHH:mm:ssZ',\n//    CALENDAR_DATE_FORMAT : 'dd/MM/yyyy' //http://bootstrap-datepicker.readthedocs.org/en/stable/options.html#format\n//});","setpoint.config(function ($routeProvider) {\n    var pathAdmin = function (arrRoutes){\n        angular.forEach(arrRoutes, function(route){\n            var path = route[0], \n            template = 'pages/admin/'+route[1]+'.html', \n            ctrl = route[2]+'Ctrl';\n            console.log(path);\n            $routeProvider.when(path,{\n                templateUrl : template,\n                controller: ctrl\n            });\n        });\n    };\n    \n    pathAdmin([\n        ['/', 'welcome', 'Home'],\n        ['/catalogos/:catalog', 'catalog', 'Catalog'],\n        ['/contenidos/:content', 'content-form', 'Content'],\n        ['/configuracion/:config', 'config', 'Config']\n    ]);\n});","!function () {\n\n    setpoint.controller('CatalogCtrl', function (\n            $scope,\n            $compile,\n            $routeParams,\n            $q, $http,\n            Size,\n            DTOptionsBuilder,\n            DTColumnBuilder) {\n        //<editor-fold defaultstate=\"collapsed\" desc=\"catalogo de productos\">\n\n        //</editor-fold>\n        this.productos = function () {\n            $scope.catalog = \"lalala\";\n        };\n        //<editor-fold defaultstate=\"collapsed\" desc=\"catalogo de tallas\">\n        this.tallas = function () {\n            $scope.selectedItem = new Size({});\n            $scope.selectedItem.name = \"XL\";\n//            $scope.selectedItem.id=false;\n//            $scope.selectedItem.save();     \n            console.log(Size);\n\n        };\n        //</editor-fold>\n        $scope.saveItem = function () {\n            $scope.selectedItem.save().then(function () {\n                console.log(\"se guardo\");\n                $scope.showForm = false;\n                $scope.selectedItem = newObj();\n            });\n        };\n\n        $scope.newItem = function () {\n            $scope.showForm = true;\n            $scope.selectedItem = newObj();\n        };\n\n        $scope.cancel = function () {\n            $scope.showForm = false;\n            $scope.selectedItem = newObj();\n        };\n\n        var newObj = function () {\n            var prototipes = {\n                'tallas': Size\n            };\n            return new prototipes[$scope.catalog]({});\n        };\n        $scope.catalog = $routeParams.catalog;\n        $scope.showForm = true;\n        $scope.form = laroute.route('page', {view: 'form-' + $scope.catalog});\n\n        $scope.selected = {};\n        $scope.selectAll = false;\n\n        $scope.toggleAll = function (selectAll, selectedItems) {\n            for (var id in selectedItems) {\n                if (selectedItems.hasOwnProperty(id)) {\n                    selectedItems[id] = selectAll;\n                }\n            }\n        };\n        $scope.toggleOne = function (selectedItems) {\n            console.log($scope.items=[]);\n            for (var id in selectedItems) {\n                if (selectedItems.hasOwnProperty(id)) {\n                    if (!selectedItems[id]) {\n                        $scope.selectAll = false;\n                        return;\n                    }\n                }\n            }\n\n            $scope.selectAll = true;\n        };\n\n        $scope.items;\n        var url = laroute.route('size.all-for-datatables');\n        $scope.dtOptions = DTOptionsBuilder.fromFnPromise(function () {\n            var defer = $q.defer();\n            $http.get(url).then(function (result) {\n                $scope.items = result.data;\n                defer.resolve(result.data);\n            });\n            return defer.promise;\n        }).withOption('createdRow', function (row, data, dataIndex) {\n                    // Recompiling so we can bind Angular directive to the DT\n                    $compile(angular.element(row).contents())($scope);\n                }).withOption('headerCallback', function (header) {\n            if (!$scope.headerCompiled) {\n                // Use this headerCompiled field to only compile header once\n                $scope.headerCompiled = true;\n                $compile(angular.element(header).contents())($scope);\n            }\n        })\n                .withPaginationType('full_numbers');\n\n        var titleHtml = '<input type=\"checkbox\" ng-model=\"selectAll\" ng-click=\"toggleAll(selectAll, selected)\">';\n        $scope.dtColumns = [\n            DTColumnBuilder.newColumn(null).withTitle(titleHtml).notSortable()\n                    .renderWith(function (data, type, full, meta) {\n                        $scope.selected[full.id] = false;\n                        return '<input type=\"checkbox\" ng-model=\"selected[' + data.id + ']\" ng-click=\"toggleOne(selected)\">';\n                    }),\n            DTColumnBuilder.newColumn('id').withTitle('ID'),\n            DTColumnBuilder.newColumn('name').withTitle('Name')\n        ];\n        this[$scope.catalog]();\n    });\n}();","setpoint.controller('ContentCtrl', function ($scope,$routeParams) {\n    switch($routeParams.content){\n        case 'nosotros':\n            $scope.content = 'Nosotros';\n            break;\n        case 'ventajas':\n            $scope.content = 'Ventajas';\n            break;\n        case 'formas-de-pago':\n            $scope.content = 'Formas de pago';\n            break;\n        case 'terminos-y-condiciones':\n            $scope.content = 'Terminos y condiciones';\n            break;\n        case 'condiciones-de-envio':\n            $scope.content = 'Condiciones de envío';\n            break;\n        case 'ccondiciones-de-retorno':\n            $scope.content = 'Condiciones de retorno';\n            break;\n        case 'protecion-de-datos':\n            $scope.content = 'Proctección de datos';\n            break;\n        default:  $scope.content =  'Contenido';\n    } \n//    console.log(\"mainController\");    \n});","setpoint.controller('HomeCtrl', function ($scope) {\n    $scope.msj = \"Bienvenido \";    \n//    console.log(\"mainController\") ;    \n});","setpoint.controller('MainCtrl', function ($scope) {\n//    $scope.mensaje = \"hola mundo\"; \n//    console.log(\"mainController\");    \n});\n","setpoint.factory('ModelBase', function (Paginacion, $q, $http, $timeout, $interval, $filter) {\n    //<editor-fold defaultstate=\"collapsed\" desc=\"constructor\">\n    var ModelBase = function (args) {\n        this.setProperties(args);\n        this.relations = {};\n        this._bk_attrs = {};\n    };\n    //</editor-fold>\n    //<editor-fold defaultstate=\"collapsed\" desc=\"Metodos de Instancia (prototype)\">\n    ModelBase.prototype = {\n        backup : function() {\n            var self = this;\n            var attributes = self.model().attributes; \n            angular.forEach(attributes, function(attr){\n                self._bk_attrs[attr] = self[attr];\n            });\n            return this;\n        },\n        rollback : function() {\n            var self = this;\n            angular.forEach(self._bk_attrs, function(i ,attr){\n                self[attr] = self._bk_attrs[attr];\n            });\n            return this;\n        },\n        //<editor-fold defaultstate=\"collapsed\" desc=\"setProperties\">\n        setProperties: function (data) {            \n            var self = this;\n            var atributes = self.model().attributes; \n            var setters = self.model().setters;\n            angular.forEach(atributes, function (attr) {\n                if(setters[attr]){\n                    self[attr] = setters[attr].apply(self,[data[attr]]);\n                    return;\n                }\n                self[attr] = data[attr];\n            });\n        },\n        selfUpdate : function (milisecons, $scope) {\n            \n            var self = this;\n            $interval(function() {\n                console.log(\"Inicia --- re\", milisecons);\n                self.refresh();\n            },milisecons);            \n        },\n        refresh : function () {\n            var data = {};\n            var self = this;\n            var $defer =  $q.defer();\n            var model = this.model();\n            data[model.aliasUrl()] = this.id;\n            var url = laroute.route(model.aliasUrl() + '.show', data);            \n            $http({\n                'method' : 'GET',\n                'url' : url\n            }).then(function(result) {\n                self.setProperties(result.data);\n            }, function(r) {                \n                $defer.reject(r);\n            });\n            return $defer;\n        },\n        getProperties : function () {\n            var self = this;\n            var data = {};\n            var attributes = self.model().attributes;\n            angular.forEach(attributes, function (attr){\n                data[attr] = self[attr];\n            });\n            return data;\n        },\n        create : function () {\n            var  data = this.getProperties();\n            var model = this.model();\n            var self = this;\n            var url = laroute.route(model.aliasUrl());        \n            var $defer = $q.defer();\n            $http({\n                'method' : 'POST',\n                'data' : data,\n                'url' : url\n            }).then(function(result) {\n                self.setProperties(result.data.model);\n                instancias =model.model().addCache(self);\n                $defer.resolve(model);\n            },function(r){\n                $defer.reject(r);\n            });\n            return $defer.promise;\n        },\n        update : function () {\n            var self = this;\n            var data = {};\n            var atributes = self.model().attributes; \n            var preparers = self.model().preparers;\n            angular.forEach(atributes, function (attr) {\n                if(preparers[attr]){\n                    data[attr] = preparers[attr].apply(self,[self[attr]]);\n                    return;\n                }\n                data[attr] = self[attr];\n            });\n            var alias= this.model().alias;\n            var datalaroute = {};\n            datalaroute[alias] = this.id;\n            var url = laroute.route(alias+'.update', datalaroute);\n            var $def = $q.defer();\n            $http({\n                url : url,\n                method : 'PUT',\n                data : data\n            }).then(function(r){\n                $def.resolve(r.data);\n            });\n            return $def.promise;\n        },\n        save : function () {\n            if(this.id){\n                return this.update();\n            }\n            return this.create();\n        \n        },\n        getter : function (key){\n            return this[\"_obj_\" + key];\n        },\n        hasMany : function (Model, key) {\n            var self = this;\n            var defer = $q.defer();\n            var url = laroute.route(self.model().aliasUrl()  + '.relation',{\n                'id' : self.id,\n                'relation' :  key\n            });\n            $http({\n                'method' : 'GET',\n                'url' : url\n            }).then(function(result){                \n                var instancias = Model.build(result.data);\n                self.relations[key] = instancias;\n                defer .resolve(instancias);                                \n            },function(r) {                \n                defer .reject(r);\n            });\n            return defer.promise;\n        },\n        belongsTo : function (Model, key) {            \n            var self = this;\n            var defer = $q.defer();\n            var id = this[key + \"_id\"];\n            if(id) {\n                Model.getById(id).then(function(entidad) {                                  \n                    self.relations[key] = entidad;                         \n                    defer.resolve(entidad);\n                }, function(r){\n                    defer.reject(r);\n                });\n            } else {\n                $timeout(function() {\n                    defer.reject();\n                }, 10);\n            }\n            \n            return defer.promise;\n        }\n        //</editor-fold>\n    };\n    //</editor-fold>\n    //<editor-fold defaultstate=\"collapsed\" desc=\"Metodos Estaticos\">\n    ModelBase.findCache = function(obj){        \n        var cache = this.model().cache;                       \n        obj = cache[obj.id];\n        if(obj){\n            return obj;\n        } else {\n            return false;\n        }\n    };\n    ModelBase.setFloat = function (value) {\n        if(value){\n            return parseFloat(value);\n        }\n        return undefined;\n    },\n    //Helper para setear fechas \n   \n    ModelBase.setDate = function (value) {\n        if(angular.isString(value)) {\n            var date = new Date(value);\n            if(isNaN(date.getTime())){\n                return null;\n            }\n            return date;\n        }\n        return value;\n    };\n    ModelBase.prepareDate = function (date){\n        var dateTemp = new Date(date);\n        dateTemp.setHours(0);\n        dateTemp.setMinutes(0);\n        dateTemp.setSeconds(0);\n        if(dateTemp.getTime && !isNaN(dateTemp.getTime())){\n            return $filter('date')(dateTemp,'yyyy-MM-ddTHH:mm:ssZ');;\n        } else {\n            return undefined;\n        }\n    };\n    ModelBase.model = function () {\n        return this.prototype.model();\n    };\n    ModelBase.getCache = function () {\n        return this.cache;\n    };    \n    ModelBase.RELATIONS = {\n        KEY : 0,\n        MODEL : 1,\n        FUNCTION : 2\n    };\n    \n    ModelBase.addRelation = function (key, fnModel, fn) {\n        var model = this.model();        \n        if(angular.isString(fn)){//funciones de relaciones por defecto                \n            switch(fn){\n                case 'belongsTo' : fn = function () {                           \n                        return this.belongsTo(fnModel, key);\n                    };\n                    model.attributes.push(key + \"_id\");\n                    break;\n                case 'hasMany' : fn = function () {                              \n                        return this.hasMany(fnModel, key);\n                    };\n                break;\n            }                \n        } \n        model.prototype[key] = fn;\n    };\n    \n    ModelBase.createModel = function (model, statics, prototype) {\n        angular.extend(model.prototype, ModelBase.prototype, prototype);\n        angular.extend(model, ModelBase, statics);\n        model.prototype.model = function () {            \n            return model;\n        };\n        model.cache = [];\n        angular.forEach(model.relations, function(v){            \n            var key = v[ModelBase.RELATIONS.KEY];            \n            var fn = v[ModelBase.RELATIONS.FUNCTION];\n            var fnModel = v[ModelBase.RELATIONS.MODEL];\n            model.addRelation(key,fnModel,fn);\n        });\n//        console.log(\"models->\"+model.attributes);\n        return model;\n    };\n    ModelBase.aliasUrl = function () {\n        return this.alias;\n    };\n    ModelBase.addCache = function(obj) {        \n        var Model = this.model();        \n        var cache = Model.getCache();\n        cache[obj.id] = obj;        \n        return obj;\n    };\n    //<editor-fold defaultstate=\"collapsed\" desc=\"build\">\n    ModelBase.build = function (data) {        \n        var Model = this.model(), obj;\n        if (angular.isArray(data)) {            \n            var arrInst = [];\n            var i = 0;\n            angular.forEach(data, function (d) {                \n                obj = Model.findCache(d);                                \n                if(obj) {\n                    obj.setProperties(d);\n                    arrInst.push(obj);\n                    i++;\n                } else {\n                    obj = Model.addCache(new Model(d));  \n                    arrInst.push(obj);\n                }\n            });\n            return arrInst;\n        }\n        obj = Model.findCache(data);\n        if(obj) {              \n            return obj;\n        } else {                        \n            obj = Model.addCache(new Model(data));\n        }\n        return obj;\n    };\n    //</editor-fold>\n    //<editor-fold defaultstate=\"collapsed\" desc=\"getAll\">\n    ModelBase.getAll = function () {\n        var self = this.model();\n        var url = laroute.route(this.aliasUrl());        \n        var $defer = $q.defer();\n        $http({\n            'method' : 'GET',\n            'params' : {\n                'paginacion' : false\n            },\n            'url' : url\n        }).then(function(result) {\n            var instancias =self.model().build(result.data);\n            $defer.resolve(instancias);\n        },function(r){\n            $defer.reject(r);\n        });\n        return $defer.promise;\n    };\n    //</editor-fold>\n    //<editor-fold defaultstate=\"collapsed\" desc=\"paginado\">\n    ModelBase.paginado = function () {            \n        var self = this;        \n        var url = laroute.route(this.aliasUrl());\n        var $defer = $q.defer();        \n        $http({\n            'method' : 'GET',\n            'params' : { \n                'paginacion' : true\n            },\n            'url' : url\n        }).then(function(result) {\n            var arrInst = [], pojsos, paginacion;            \n                pojsos = result.data.data;\n                paginacion = new Paginacion.build(result.data, self.model());\n            $defer.resolve({\n                'instancias': arrInst,\n                'paginacion' : paginacion\n            });\n        });\n        return $defer.promise;\n    };\n    //</editor-fold>\n    ModelBase.remove = function () {\n        console.log(\"pediente crear metodo de eliminacion\");\n    };\n    ModelBase.save  = function () {\n        console.log(\"pendiente crear método de creacion/actualizacion\");\n    };\n    //<editor-fold defaultstate=\"collapsed\" desc=\"getURLForAllDataTables\">\n    ModelBase.getURLForAllDataTables = function () {\n        var self = this;\n        var url = laroute.route(self.model().aliasUrl()  + '.all-for-datatables', {});\n        return url;\n    };\n    //</editor-fold>\n    //<editor-fold defaultstate=\"collapsed\" desc=\"getallForDataTables\">\n    ModelBase.getAllForDataTables = function() {\n        var self = this;\n        var url = self.getURLForAllDataTables();\n        var $defer = $q.defer();\n        $http({\n            'method' : 'GET',\n            'url' : url\n        }).then(function(result) {\n            $defer.resolve(result.data);\n        });\n        return $defer.promise;\n    };\n    //</editor-fold>\n    //<editor-fold defaultstate=\"collapsed\" desc=\"getById\">\n    ModelBase.getById = function(id, args) {        \n        var data = angular.extend(args || {} , {\n            id : id\n        });        \n        var self = this; \n        var $defer = $q.defer();                \n        var objCache = self.model().findCache(data);     \n//        console.log(objCache);\n        if(objCache !== false) {\n            $timeout(function() {\n                $defer.resolve(objCache);\n            }, 10);\n        } else {   \n            data = {};\n            data[this.aliasUrl()] = id;\n            var url = laroute.route(this.aliasUrl() + '.show', data);            \n            $http({\n                'method' : 'GET',\n                'url' : url\n            }).then(function(result) {\n                var instancias = self.model().build(result.data);\n                $defer.resolve(instancias);\n            }, function(r) {                \n                $defer.reject(r);\n            });\n        }\n        return $defer.promise;\n    };\n    //</editor-fold>\n    //</editor-fold>\n    return ModelBase;\n});\n","/* global angular, glimglam */\nsetpoint.factory('Paginacion', function () {\n    var Paginacion = function (args) {        \n        this.setPropieties(args);\n    };\n    //Se hereda el prototipo base y se agregan los metodos personalizados\n    Paginacion.prototype = {\n        setPropieties: function (data) {            \n            var self = this;\n            var atributes = this.getAttributes();\n            angular.forEach(atributes, function (value) {                \n                self[value] = data[value];\n            });\n        },\n        getAttributes: function () {\n            return [\n                'current_page',\n                'from',\n                'last_page',\n                'next_page_url',\n                'per_page',\n                'prev_page_url',\n                'to',\n                'total'\n            ];\n        }\n    };\n    Paginacion.build = function (data) {        \n        return new Paginacion(data);\n    };\n    return Paginacion;\n});","setpoint.factory('Size', function (ModelBase,$q,$http) {    \n    var Size = function (args) {\n        ModelBase.apply(this, arguments);\n    };\n    ModelBase.createModel(Size , {   \n        alias: 'size',\n        setters : {\n        },\n        attributes: [\n            'id',\n            'name'\n        ],\n        relations : []\n    }, {\n    });\n    return Size;\n});"],"sourceRoot":"/source/"}