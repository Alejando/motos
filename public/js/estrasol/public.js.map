{"version":3,"sources":["global.js","fb/pixel.js","fn/auctions.js","public.js","ModelBase.js","models/AuctionModel.js","models/Paginacion.js","models/User.js","numberFixedLen.js","checkOutCtrl.js","checkoutEnrollCtrl.js","indexCtrl.js","profileCtrl.js","roomCtrl.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;ACHA;AACA;AACA;AACA;AACA;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChzzbjGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvfile":"public.js","sourcesContent":["!function () {\n    var g = window.jsGlimglam = {};\n    jsGlimglam.fn = {};\n}();","!function(f,b,e,v,n,t,s){if(f.fbq)return;n=f.fbq=function(){n.callMethod?\nn.callMethod.apply(n,arguments):n.queue.push(arguments)};if(!f._fbq)f._fbq=n;\nn.push=n;n.loaded=!0;n.version='2.0';n.queue=[];t=b.createElement(e);t.async=!0;\nt.src=v;s=b.getElementsByTagName(e)[0];s.parentNode.insertBefore(t,s)}(window,\ndocument,'script','https://connect.facebook.net/en_US/fbevents.js');","!function () {\n    window.jsGlimglam.fn.auctions = {\n        addFav : function (code) {\n            var url = laroute.route('user.add-fav',{\n                'code' : code\n            });\n            return $.get(url,{},$.noop,'json');\n        },\n        removeFav : function (code) {\n            var url = laroute.route('user.remove-fav',{\n                 'code' : code\n             });\n             return $.get(url,{},$.noop,'json');\n         }\n    };\n}();\n","var glimglam = angular.module(\"glimglam\", ['ui-rangeSlider','timer', 'slugifier']);  ","glimglam.factory('ModelBase', function (Paginacion, $q, $http, $timeout, $interval, $filter) {\n    //<editor-fold defaultstate=\"collapsed\" desc=\"constructor\">\n    var ModelBase = function (args) {\n        this.setProperties(args);\n        this.relations = {};\n        this._bk_attrs = {};\n    };\n    //</editor-fold>\n    //<editor-fold defaultstate=\"collapsed\" desc=\"Metodos de Instancia (prototype)\">\n    ModelBase.prototype = {\n        backup : function() {\n            var self = this;\n            var attributes = self.model().attributes; \n            angular.forEach(attributes, function(attr){\n                self._bk_attrs[attr] = self[attr];\n            });\n            return this;\n        },\n        rollback : function() {\n            var self = this;\n            angular.forEach(self._bk_attrs, function(i ,attr){\n                self[attr] = self._bk_attrs[attr];\n            });\n            return this;\n        },\n        //<editor-fold defaultstate=\"collapsed\" desc=\"setProperties\">\n        setProperties: function (data) {            \n            var self = this;\n            var atributes = self.model().attributes; \n            var setters = self.model().setters;\n            angular.forEach(atributes, function (attr) {\n                if(setters[attr]){\n                    self[attr] = setters[attr].apply(self,[data[attr]]);\n                    return;\n                }\n                self[attr] = data[attr];\n            });\n        },\n        selfUpdate : function (milisecons, $scope) {\n            \n            var self = this;\n            $interval(function() {\n                console.log(\"Inicia --- re\", milisecons);\n                self.refresh();\n            },milisecons);            \n        },\n        refresh : function () {\n            var data = {};\n            var self = this;\n            var $defer =  $q.defer();\n            var model = this.model();\n            data[model.aliasUrl()] = this.id;\n            var url = laroute.route(model.aliasUrl() + '.show', data);            \n            $http({\n                'method' : 'GET',\n                'url' : url\n            }).then(function(result) {\n                self.setProperties(result.data);\n            }, function(r) {                \n                $defer.reject(r);\n            });\n            return $defer;\n        },\n        getProperties : function () {\n            var self = this;\n            var data = {};\n            var attributes = self.model().attributes;\n            angular.forEach(attributes, function (attr){\n                data[attr] = self[attr];\n            });\n            return data;\n        },\n        create : function () {\n            var  data = this.getProperties();\n            var model = this.model();\n            var self = this;\n            var url = laroute.route(model.aliasUrl());        \n            var $defer = $q.defer();\n            $http({\n                'method' : 'POST',\n                'data' : data,\n                'url' : url\n            }).then(function(result) {\n                self.setProperties(result.data.model);\n                instancias =model.model().addCache(self);\n                $defer.resolve(model);\n            },function(r){\n                $defer.reject(r);\n            });\n            return $defer.promise;\n        },\n        update : function () {\n            var self = this;\n            var data = {};\n            var atributes = self.model().attributes; \n            var preparers = self.model().preparers;\n            angular.forEach(atributes, function (attr) {\n                if(preparers[attr]){\n                    data[attr] = preparers[attr].apply(self,[self[attr]]);\n                    return;\n                }\n                data[attr] = self[attr];\n            });\n            var alias= this.model().alias;\n            var datalaroute = {};\n            datalaroute[alias] = this.id;\n            var url = laroute.route(alias+'.update', datalaroute);\n            var $def = $q.defer();\n            $http({\n                url : url,\n                method : 'PUT',\n                data : data\n            }).then(function(r){\n                $def.resolve(r.data);\n            });\n            return $def.promise;\n        },\n        save : function () {\n            if(this.id){\n                return this.update();\n            }\n            return this.create();\n        \n        },\n        getter : function (key){\n            return this[\"_obj_\" + key];\n        },\n        hasMany : function (Model, key) {\n            var self = this;\n            var defer = $q.defer();\n            var url = laroute.route(self.model().aliasUrl()  + '.relation',{\n                'id' : self.id,\n                'relation' :  key\n            });\n            $http({\n                'method' : 'GET',\n                'url' : url\n            }).then(function(result){                \n                var instancias = Model.build(result.data);\n                self.relations[key] = instancias;\n                defer .resolve(instancias);                                \n            },function(r) {                \n                defer .reject(r);\n            });\n            return defer.promise;\n        },\n        belongsTo : function (Model, key) {            \n            var self = this;\n            var defer = $q.defer();\n            var id = this[key + \"_id\"];\n            if(id) {\n                Model.getById(id).then(function(entidad) {                                  \n                    self.relations[key] = entidad;                         \n                    defer.resolve(entidad);\n                }, function(r){\n                    defer.reject(r);\n                });\n            } else {\n                $timeout(function() {\n                    defer.reject();\n                }, 10);\n            }\n            \n            return defer.promise;\n        }\n        //</editor-fold>\n    };\n    //</editor-fold>\n    //<editor-fold defaultstate=\"collapsed\" desc=\"Metodos Estaticos\">\n    ModelBase.findCache = function(obj){        \n        var cache = this.model().cache;                       \n        obj = cache[obj.id];\n        if(obj){\n            return obj;\n        } else {\n            return false;\n        }\n    };\n    ModelBase.setFloat = function (value) {\n        if(value){\n            return parseFloat(value);\n        }\n        return undefined;\n    },\n    //Helper para setear fechas \n   \n    ModelBase.setDate = function (value) {\n        if(angular.isString(value)) {\n            var date = new Date(value);\n            if(isNaN(date.getTime())){\n                return null;\n            }\n            return date;\n        }\n        return value;\n    };\n    ModelBase.prepareDate = function (date){\n        var dateTemp = new Date(date);\n        dateTemp.setHours(0);\n        dateTemp.setMinutes(0);\n        dateTemp.setSeconds(0);\n        if(dateTemp.getTime && !isNaN(dateTemp.getTime())){\n            return $filter('date')(dateTemp,'yyyy-MM-ddTHH:mm:ssZ');;\n        } else {\n            return undefined;\n        }\n    };\n    ModelBase.model = function () {\n        return this.prototype.model();\n    };\n    ModelBase.getCache = function () {\n        return this.cache;\n    };    \n    ModelBase.RELATIONS = {\n        KEY : 0,\n        MODEL : 1,\n        FUNCTION : 2\n    };\n    \n    ModelBase.addRelation = function (key, fnModel, fn) {\n        var model = this.model();        \n        if(angular.isString(fn)){//funciones de relaciones por defecto                \n            switch(fn){\n                case 'belongsTo' : fn = function () {                           \n                        return this.belongsTo(fnModel, key);\n                    };\n                    model.attributes.push(key + \"_id\");\n                    break;\n                case 'hasMany' : fn = function () {                              \n                        return this.hasMany(fnModel, key);\n                    };\n                break;\n            }                \n        } \n        model.prototype[key] = fn;\n    };\n    \n    ModelBase.createModel = function (model, statics, prototype) {\n        angular.extend(model.prototype, ModelBase.prototype, prototype);\n        angular.extend(model, ModelBase, statics);\n        model.prototype.model = function () {            \n            return model;\n        };\n        model.cache = [];\n        angular.forEach(model.relations, function(v){            \n            var key = v[ModelBase.RELATIONS.KEY];            \n            var fn = v[ModelBase.RELATIONS.FUNCTION];\n            var fnModel = v[ModelBase.RELATIONS.MODEL];\n            model.addRelation(key,fnModel,fn);\n        });\n//        console.log(\"models->\"+model.attributes);\n        return model;\n    };\n    ModelBase.aliasUrl = function () {\n        return this.alias;\n    };\n    ModelBase.addCache = function(obj) {        \n        var Model = this.model();        \n        var cache = Model.getCache();\n        cache[obj.id] = obj;        \n        return obj;\n    };\n    //<editor-fold defaultstate=\"collapsed\" desc=\"build\">\n    ModelBase.build = function (data) {        \n        var Model = this.model(), obj;\n        if (angular.isArray(data)) {            \n            var arrInst = [];\n            var i = 0;\n            angular.forEach(data, function (d) {                \n                obj = Model.findCache(d);                                \n                if(obj) {\n                    obj.setProperties(d);\n                    arrInst.push(obj);\n                    i++;\n                } else {\n                    obj = Model.addCache(new Model(d));  \n                    arrInst.push(obj);\n                }\n            });\n            return arrInst;\n        }\n        obj = Model.findCache(data);\n        if(obj) {              \n            return obj;\n        } else {                        \n            obj = Model.addCache(new Model(data));\n        }\n        return obj;\n    };\n    //</editor-fold>\n    //<editor-fold defaultstate=\"collapsed\" desc=\"getAll\">\n    ModelBase.getAll = function () {\n        var self = this.model();\n        var url = laroute.route(this.aliasUrl());        \n        var $defer = $q.defer();\n        $http({\n            'method' : 'GET',\n            'params' : {\n                'paginacion' : false\n            },\n            'url' : url\n        }).then(function(result) {\n            var instancias =self.model().build(result.data);\n            $defer.resolve(instancias);\n        },function(r){\n            $defer.reject(r);\n        });\n        return $defer.promise;\n    };\n    //</editor-fold>\n    //<editor-fold defaultstate=\"collapsed\" desc=\"paginado\">\n    ModelBase.paginado = function () {            \n        var self = this;        \n        var url = laroute.route(this.aliasUrl());\n        var $defer = $q.defer();        \n        $http({\n            'method' : 'GET',\n            'params' : { \n                'paginacion' : true\n            },\n            'url' : url\n        }).then(function(result) {\n            var arrInst = [], pojsos, paginacion;            \n                pojsos = result.data.data;\n                paginacion = new Paginacion.build(result.data, self.model());\n            $defer.resolve({\n                'instancias': arrInst,\n                'paginacion' : paginacion\n            });\n        });\n        return $defer.promise;\n    };\n    //</editor-fold>\n    ModelBase.remove = function () {\n        console.log(\"pediente crear metodo de eliminacion\");\n    };\n    ModelBase.save  = function () {\n        console.log(\"pendiente crear método de creacion/actualizacion\");\n    };\n    //<editor-fold defaultstate=\"collapsed\" desc=\"getURLForAllDataTables\">\n    ModelBase.getURLForAllDataTables = function () {\n        var self = this;\n        var url = laroute.route(self.model().aliasUrl()  + '.all-for-datatables', {});\n        return url;\n    };\n    //</editor-fold>\n    //<editor-fold defaultstate=\"collapsed\" desc=\"getallForDataTables\">\n    ModelBase.getAllForDataTables = function() {\n        var self = this;\n        var url = self.getURLForAllDataTables();\n        var $defer = $q.defer();\n        $http({\n            'method' : 'GET',\n            'url' : url\n        }).then(function(result) {\n            $defer.resolve(result.data);\n        });\n        return $defer.promise;\n    };\n    //</editor-fold>\n    //<editor-fold defaultstate=\"collapsed\" desc=\"getById\">\n    ModelBase.getById = function(id, args) {        \n        var data = angular.extend(args || {} , {\n            id : id\n        });        \n        var self = this; \n        var $defer = $q.defer();                \n        var objCache = self.model().findCache(data);     \n//        console.log(objCache);\n        if(objCache !== false) {\n            $timeout(function() {\n                $defer.resolve(objCache);\n            }, 10);\n        } else {   \n            data = {};\n            data[this.aliasUrl()] = id;\n            var url = laroute.route(this.aliasUrl() + '.show', data);            \n            $http({\n                'method' : 'GET',\n                'url' : url\n            }).then(function(result) {\n                var instancias = self.model().build(result.data);\n                $defer.resolve(instancias);\n            }, function(r) {                \n                $defer.reject(r);\n            });\n        }\n        return $defer.promise;\n    };\n    //</editor-fold>\n    //</editor-fold>\n    return ModelBase;\n});\n","glimglam.factory('Auction', function (ModelBase,$q,$http) {    \n    var Auction = function (args) {\n        ModelBase.apply(this, arguments);\n    };\n    ModelBase.createModel(Auction , {   \n        FINISHED : 2,\n        STARTED : 1,\n        STAND_BY : 0,\n        //Tipos de portadas\n        COVER_HORIZOTAL : 'horizontal',\n        COVER_VERTICAL : 'vertical',\n        COVER_SLIDER_UPCOMING :'slider-upcoming',\n        alias: 'auction',\n        setters : {\n           start_date : ModelBase.setDate,\n            end_date : ModelBase.setDate,\n            max_offer : ModelBase.setFloat,\n            min_offer : ModelBase.setFloat\n        },\n        attributes: [\n            'id',\n            'category',\n            'sub_category',\n            'target',\n            'code',\n            'barcode',\n            'title',\n            'real_price',\n            'cover',\n            'min_offer',\n            'max_offer',\n            'bids',\n            'max_price',\n            'user_quota',\n            'users_limit',\n            'delay',\n            'max_user_quiet',\n            'death_time',\n            'description',\n            'start_date',\n            'end_date',\n            'ready',\n            'status',\n            'winner',\n            'total_enrollments',\n            'inflows',\n            'sold_for',\n            'last_offer',\n            'create_at',\n            'update_at',\n            'winnername',\n            'num_bids',\n            'mid_bids'\n        ],\n        relations : [],\n        getFavByUser : function (user) {\n            var $defer = $q.defer();\n            var self = this;\n            var url = laroute.route('user.get-fav',{\n                'userId' : user.id\n            });\n            $http({\n                'method' : 'GET',\n                'url' : url\n            }).then(function(result){\n                var objs = self.build(result.data);\n                $defer.resolve(objs);\n            });\n            return $defer.promise;\n        },\n        getByCode : function (code){\n            var $defer = $q.defer();\n            var url = laroute.route('auction.getByCode', {\n                'code' : code\n            });\n            var self = this;\n            $http({\n                'method' : 'GET',\n                'url' :  url\n            }).then(function(result){\n                $defer.resolve(self.build(result.data));\n            });\n            return $defer.promise;\n        },\n        getUpcoming : function (n, page) {\n            var _page = page?page:1;\n            var url = laroute.route('auction.upcoming', {\n                n:n,\n                page : _page\n            });\n            var $defer = $q.defer();\n            var self = this;\n            $http({\n                'method' : 'GET',\n                'url' :  url\n            }).then(function(result){\n                $defer.resolve(self.build(result.data.data));\n            });\n            return $defer.promise;\n        },\n        getFinished : function (n, page) {\n            var _page = page ? page : 1;\n            var url = laroute.route('auction.finished', {\n                n:n,\n                page : _page\n            });\n            var $defer = $q.defer();\n            var self = this;\n            $http({\n                'method': 'GET',\n                'url': url\n            }).then(function(result) {\n                $defer.resolve(self.build(result.data.data));\n            });\n            return $defer.promise;\n        },\n        getStarted : function (n, page){\n            var _page = page ? page:1;\n            var url = laroute.route('auction.started', {\n                n : n,\n                page : _page\n            });\n            var $defer = $q.defer();\n            var self = this;\n            $http({\n                'method' : 'GET',\n                'url' : url\n            }).then(function(result) {\n                $defer.resolve(self.build(result.data.data));\n            });\n            return $defer.promise;\n        }\n    }, {\n        placeBid : function (bid) {\n            var $defer = $q.defer();\n            var url = laroute.route('auction.place-bid');\n            //console.log(url);\n            var data = {\n                code : this.code,\n                bid : bid\n            };\n            $http({\n                'method' : 'POST',\n                'url': url,\n                'data' : data\n            }).then(function(result) {\n                //console.log(result);\n                $defer.resolve(result.data);\n            }, function(r) {\n                $defer.reject(r);\n            });\n            return $defer.promise;\n        },\n        getUrlCover : function (version) {\n            var url = laroute.route('auction.getCover',{\n                version:version,\n                code: this.code\n            });\n            return url;\n        },\n        getStartDate : function () {\n            return new Date(this.start_date);\n        },\n        getEndDate : function () {\n            return \"Fecha de Termino\";\n        },\n        getStatusStr : function () {\n           switch(this.status) {\n               case Auction.STARTED: return \"Iniciada\";\n               case Auction.FINISHED: return \"Terminada\";\n               case Auction.STAND_BY: return \"En espera\";\n           }\n        },\n        isStarted : function(){\n            return  this.status == Auction.STARTED;\n        },\n        isFinished : function () {\n            return this.status == Auction.FINISHED;\n        },\n        isStandBy : function () {\n            return this.status == Auction.STAND_BY;\n        },\n        getInfoBid : function(){\n            var $defer = $q.defer();\n            var url = laroute.route('auction.get-info-bid', {\n                'code':this.code\n            });\n            //console.log(url);\n            $http({\n                'method' : 'GET',\n                'url': url\n            }).then(function(result) {\n                $defer.resolve(result.data);\n            }, function(r) {\n                $defer.reject(r);\n            });\n            return $defer.promise;\n        }\n    });    \n    //<editor-fold defaultstate=\"collapsed\" desc=\"buscarFolio\">\n    return Auction;\n});","/* global angular, glimglam */\nglimglam.factory('Paginacion', function () {\n    var Paginacion = function (args) {        \n        this.setPropieties(args);\n    };\n    //Se hereda el prototipo base y se agregan los metodos personalizados\n    Paginacion.prototype = {\n        setPropieties: function (data) {            \n            var self = this;\n            var atributes = this.getAttributes();\n            angular.forEach(atributes, function (value) {                \n                self[value] = data[value];\n            });\n        },\n        getAttributes: function () {\n            return [\n                'current_page',\n                'from',\n                'last_page',\n                'next_page_url',\n                'per_page',\n                'prev_page_url',\n                'to',\n                'total'\n            ];\n        }\n    };\n    Paginacion.build = function (data) {        \n        return new Paginacion(data);\n    };\n    return Paginacion;\n});","glimglam.factory('User', function (ModelBase, Auction, $q, $http) {\n    var User = function (args) {\n        ModelBase.apply(this, arguments);\n    };\n    ModelBase.createModel(User , {\n        FINISHED : 2,\n        STARTED : 1,\n        STAND_BY : 0,\n        alias: 'user',\n//        cache : [],\n        setters : {\n            startDate : ModelBase.setDate,\n            endDate : ModelBase.setDate,\n            birthday : ModelBase.setDate\n        },\n        preparers:{\n            birthday : ModelBase.prepareDate\n        },\n        attributes: [\n            'id',\n            'name',\n            'email',\n            'profile',\n            'birthday',\n            'gender',\n            'password',\n            'newPassword'\n        ],\n        relations : [],\n        getAuthUser : function () {\n            var $def = $q.defer();\n            var url = laroute.route('user.get-auth-user');\n            var self = this;\n            $http.get(url,{}).then(function(result){\n                var user = self.build(result.data);\n                $def.resolve(user);\n            });\n            return $def.promise;\n        }\n    }, {\n        getFavs : function ( ){\n            return Auction.getFavByUser(this);\n        },\n        getWins : function () {\n            var $def = $q.defer();\n            var url = laroute.route('user.get-my-wins',{\n                'userId' : this.id\n            });\n            $http({\n                'url':url,\n                'method' : 'GET'\n            }).then(function(r) {\n                var wins = Auction.build(r.data);\n                $def.resolve(wins);\n            });\n            return $def.promise;\n        },\n        getCurrentAuctions : function () {\n            var $def = $q.defer();\n            var url = laroute.route('user.get-current-auction',{\n                'userId' : this.id\n            });\n            $http({\n                url : url,\n                method : 'GET'\n            }).then(function(res) {\n                var auction = Auction.build(res.data);\n                $def.resolve(auction);\n            });\n            return $def.promise;\n        },\n        getAuctionsInfo : function (){\n            var $def = $q.defer();\n            var url = laroute.route('user.get-auctions-info',{\n                'userId' : this.id\n            });\n            $http({\n                'url':url,\n                'method' : 'GET'\n            }).then(function(res){\n                $def.resolve(res.data);\n            });\n            return $def.promise;\n        },\n        getEnrolled : function() {\n            var $def = $q.defer();\n            var url = laroute.route('user.get-my-enrollments',{\n                'userId' : this.id\n            });\n            $http({\n                'url':url,\n                'method':'GET'\n            }).then(function(res){\n                var enrolleds = Auction.build(res.data);\n                $def.resolve(enrolleds);\n            });\n            return $def.promise; \n        },\n        fnGender : function(gender){            \n            if(gender === undefined){\n                return this.gender.toString();\n            }\n            this.gender = parseInt(gender, 10);\n        }\n    });\n    \n    //<editor-fold defaultstate=\"collapsed\" desc=\"buscarFolio\">\n    return User;\n});","glimglam.filter('numberFixedLen', function () {\n    return function (n, len) {\n        var num = parseInt(n, 10);\n        len = parseInt(len, 10);\n        if (isNaN(num) || isNaN(len)) {\n            return n;\n        }\n        num = '' + num; \n        while (num.length < len) { \n            num = '0' + num;\n        }\n        return num;\n    };\n});","glimglam.controller('public.checkOutCtrl', function ($scope, Auction) {\n    $scope.pay = function () {\n        alert(\"PayPal\");\n        console.log(\"a pay pal\");\n    };\n});","glimglam.controller('public.checkoutEnrollCtrl', function ($scope, Auction, $http) {\n    var url = laroute.route('user.bills-info');\n    $scope.billInfo = {\n        rfc: '',\n        business_name: '',\n        address: '',\n        neighborhood: '',\n        postal_code: '',\n        city: '',\n        state: '',\n        user_id: ''\n    };\n    $http({\n        'url' : url,\n        'meethod' : 'GET'\n    }).then(function(r){\n        if(!r.data.error) {\n            $scope.billInfo.rfc = r.data.rfc;\n            $scope.billInfo.business_name = r.data.business_name;\n            $scope.billInfo.address = r.data.address;\n            $scope.billInfo.neighborhood = r.data.neighborhood;\n            $scope.billInfo.postal_code = r.data.postal_code;\n            $scope.billInfo.city = r.data.city;\n            $scope.billInfo.state = r.data.state;\n            $scope.billInfo.user_id = r.data.user_id;\n        }\n    });\n    \n    $(\".form-factura\").hide();\n    \n    \n    var $subTotal = $('#enroll-sub-total');\n    var $iva = $('#enroll-iva');\n    var $total = $('#enroll-total');    \n    $scope.errors = {};\n    $('.subasta-boton-pago').click(function(e){\n        e.preventDefault();\n        var self = this;\n        var code = self.dataset.code;\n        if($(\".facturar\").is(':checked')) {            \n            $scope.valido = true;\n            $scope.$apply(function(){\n                $scope.errors.rfc = false;\n                if(!/^([A-Z,Ñ,&]{3,4}([0-9]{2})(0[1-9]|1[0-2])(0[1-9]|1[0-9]|2[0-9]|3[0-1])[A-Z|\\d]{3})$/.test($scope.billInfo.rfc)){\n                    $scope.errors.rfc = \"* El RFC ingresado no cumple con el formato requerido\";\n                    $scope.valido = false;\n                } \n                angular.forEach($scope.billInfo, function(e, i) {\n                    if(!$scope.billInfo[e]){\n                        $scope.errors[i]=\"* Campo obligatorio.\";\n                        $scope.valido = false;\n                    }\n                });\n            });\n            if($scope.valido){\n                $scope.$apply(function(){\n                    $http({\n                        'method' : 'POST',\n                        'url' : url,\n                        'data' : $scope.billInfo\n                    }).then(function(){\n                        var href = laroute.route('auction.checkout',{\n                            'code' : code,\n                            'bill' : true\n                        });\n                        $scope.send(href);\n                    });\n                });\n            }\n        } else {\n            $scope.$apply(function(){\n                var href = laroute.route('auction.checkout',{\n                    'code' : code,\n                    'bill' : false\n                });\n                $scope.send(href);\n            });\n        }\n    });\n    $scope.send = function (href) {\n        window.open(href, '_self');\n    };\n    $(\".facturar\").click(function () {\n        if ($(this).is(\":checked\")) {\n            var total = parseFloat($total.attr('cant'));\n            var subTotal = (total / (window.ivaCant + 1));\n            var iva = parseFloat(total - subTotal);\n            $iva.attr('cant', iva).html('$' + iva.toFixed(2));\n            $subTotal.attr('cant', subTotal).html('$' + subTotal.toFixed(2));\n            $(\".form-factura\").show(600);\n        } else {\n            var subTotal = parseFloat($total.attr('cant'));\n            $iva.attr('cant', '0.00').html('$0.00');\n            $subTotal.attr('cant', subTotal.toFixed(2)).html('$' + subTotal.toFixed(2));\n            $(\".form-factura\").hide(200);\n        }\n    });\n});","glimglam.controller('public.IndexCtrl', function ($scope, Auction) {\n//    $scope.titulo = \"Hello\";\n//    window.Auction = Auction;\n////    Auction.getAll().then(function(all) {\n//        console.log(all);\n//    });\n//    Auction.getByCode(\"SUB001\").then(function(byCode) {\n//        console.log(\"Auction byCode=> %o\", byCode);\n//        console.log(\"cover horizontal => %o\", byCode.getUrlCover(Auction.COVER_HORIZOTAL));\n//        console.log(\"cover vertical => %o\", byCode.getUrlCover(Auction.COVER_VERTICAL));\n//        console.log('cover slider => %o',  byCode.getUrlCover(Auction.COVER_SLIDER_UPCOMING));\n//    });\n//    Auction.getUpcoming(10).then(function(auctions) {\n//        console.log('diez proximas => %o', auctions);\n//    });\n//    Auction.getFinished(10).then(function(auctions) {\n//        console.log('las ultimas 10 terminadas => %o', auctions);\n//    });\n//    Auction.getStarted(10).then(function(auctions){\n//        console.log('las ultimas iniciadas => %o', auctions);\n//    });\n    \n    $scope.lastStarted = null;\n    \n    \n    //Fancybox producto\n     \n    \n    Auction.getStarted(1).then(function(auction) {\n        if(auction.length) {\n            $scope.lastStarted = auction[0];\n            $scope.lastStarted.selfUpdate(1500000, $scope);\n        } else {\n            Auction.getUpcoming(1).then(function(auction){\n                $scope.lastStarted = auction[0];\n                $scope.lastStarted.selfUpdate(1500000, $scope); \n            });\n        }\n    });\n});","glimglam.controller('public.profileCtrl', function ($scope, User) {\n    var setBrithday = function () {\n        var birth = $scope.user.birthday;\n        if(birth){\n            $scope.brithday.day = birth.getDate().toString();\n            $scope.brithday.month = (birth.getMonth() + 1).toString();\n            $scope.brithday.year = birth.getFullYear().toString();\n        }        \n    };\n    //<editor-fold defaultstate=\"collapsed\" desc=\"getAuthUser\">\n    User.getAuthUser().then(function (user) {\n        $('.div-profile').slideDown('slow');\n        $scope.user = user;\n        $scope.user.backup();\n        setBrithday();\n        $scope.getWins();\n        $scope.getEnrolled();\n        $scope.user.getCurrentAuctions().then(function(actual){\n            console.log(actual);\n            $scope.actual = actual;\n        });\n        $scope.user.getAuctionsInfo().then(function(info){\n        $scope.myTotalEnrollments = info.totalEnrollments;\n        $scope.myTotalWins = info.totalWins;\n            console.log(info);\n        });\n    });\n    //</editor-fold>\n    $scope.section = 'profile';\n    //<editor-fold defaultstate=\"collapsed\" desc=\"setSection\">\n    $scope.setSection = function (section) {\n        \n        $scope.section = section;\n        if(section === 'favs') {\n            $scope.getFavs();\n        }\n        $scope.user.rollback();\n        $scope.newPassword = \"\";\n        $scope.confirmPassword = '';\n        $scope.password = '';\n    };\n    //</editor-fold>\n    //<editor-fold defaultstate=\"collapsed\" desc=\"Imagen de perfil\">\n    $('#img-profile').change(function () {\n        var file = this.files[0];\n        if (file) {\n            console.log(file.type);\n            if (file.type !== 'image/jpeg' && file.type !== 'image/jpg') {\n                alert(\"Solo se admiten imagenes JPG\");\n                return;\n            }\n\n            var reader = new FileReader();\n            reader.onloadend = function () {\n                var data = new FormData();\n                data.append('img', file);\n                var url = laroute.route('user.save-img-profile');\n                $.ajax({\n                    url: url,\n                    data: data,\n                    cache: false,\n                    contentType: false,\n                    processData: false,\n                    type: 'POST',\n                    success: function (data) {\n                        var urlImg = laroute.route('user.img-avatar', {\n                            'userId': $scope.user.id\n                        }) + '?' + (new Date).getTime();\n                        console.log(urlImg);\n                        $('#foto-perfil').attr('src', urlImg);\n                    }\n                });\n            };\n            reader.readAsDataURL(file);\n        }\n    });\n    $scope.changeImg = function () {\n        $('#img-profile').click();\n    };\n\n    //</editor-fold>\n    $scope.brithday = {\n        'day': \"0\",\n        'month': \"0\",\n        'year': \"0\"\n    };\n    $scope.errors = {};\n    $scope.getFavs = function () {\n        $scope.user.getFavs().then(function(favs) {\n            $scope.favs = favs;\n        });\n    };\n    $scope.getWins = function () {\n        $scope.user.getWins().then(function(wins) { \n            $scope.wins = wins;\n        });\n    };\n    $scope.getEnrolled = function() {\n        $scope.user.getEnrolled().then(function(enrolleds) {\n            $scope.enrolleds = enrolleds;\n        });\n    };\n    $scope.removeFav = function(auction, $event){\n        $event.preventDefault();\n        jsGlimglam.fn.auctions.removeFav(auction.code).done(function () {\n            $scope.$apply(function(){\n                $scope.favs.splice($scope.favs.indexOf(auction), 1);\n            });\n        });\n    };\n    \n    //<editor-fold defaultstate=\"collapsed\" desc=\"updateProfile\">\n    $scope.updateProfile = function () {\n        console.log($scope.brithday.day, $scope.brithday.month, $scope.brithday.year);\n        if(\n            $scope.brithday.day==0 ||\n            $scope.brithday.month==0 ||\n            $scope.brithday.year==0\n                \n        ) {\n            bootbox.alert(\"Por favor ingresa tu fecha de nacimiento\");\n            return;\n        }\n        if(!$scope.user.password){\n            bootbox.alert(\"Ingresa tu contraseña actual para autorizar los cambios\");\n            return ;\n        }\n        if ($scope.newPassword) {\n            if ($scope.confirmPassword !== $scope.newPassword) {\n                $scope.errors.confirmPassword = \"Tu confirmación no coicide\";\n                return;\n            } else {\n                $scope.errors.confirmPassword = \"\";\n            }\n            $scope.user.newPassword = $scope.newPassword;\n        }\n        if($scope.user.birthday === null) {\n            $scope.user.birthday = new Date();\n        }\n        var birthday = $scope.user.birthday;\n        birthday.setDate($scope.brithday.day);\n        birthday.setMonth($scope.brithday.month - 1);\n        birthday.setYear($scope.brithday.year);\n        $scope.user.save().then(function (res) {\n            if (res.error) {\n                $scope.errors.password = res.msj;\n                if($scope.errors.password){\n                    bootbox.alert(res.msj);\n                    return;\n                }\n                $scope.errors.confirmPassword = \"\";\n                return;\n            }\n            $scope.errors.password = false;\n            $('#nombre-usr').html(\"@\" + $scope.user.email.split('@')[0]);\n            $('.pass').val(\"\");\n            var $box = bootbox.alert(\"Tus datos fueron actualizados correctamente\");\n            $box.css('zIndex', 2000);\n        });\n    };\n    //</editor-fold>\n    //<editor-fold defaultstate=\"collapsed\" desc=\"rollback\">\n    $scope.rollback = function () {\n        $scope.user.rollback();\n        $('.pass').val(\"\");\n        if ($scope.user.birthday !== null) {\n            setBrithday();\n        } else {\n            $scope.brithday.day = \"0\";\n            $scope.brithday.month = \"0\";\n            $scope.brithday.year = \"0\";\n        }\n    };\n    //</editor-fold>\n\n});","glimglam.controller('public.roomCtrl', function ($scope, Auction, $interval, $element,$compile) {\n    $scope.id_user = window.id_user;\n    $scope.objAuction = new Auction(auction);\n    $scope.totalBids = 0;\n    $scope.nextBid = new Date();\n    $('.section-room').fadeIn('slow');      \n    $interval(function() {\n        $scope.now = new Date();\n    }, 100);\n    $interval(function() {\n        $scope.getInfo();\n    }, 10000);\n    $scope.rangeOferta = {\n         min: 0,\n         max: $scope.objAuction.min_offer,\n         limitMax: $scope.objAuction.max_offer,\n         limitMin: $scope.objAuction.min_offer\n    };\n    $scope.help = {\n        nextBid : new Date()\n    };\n    $scope.getInfo = function (){\n        $scope.objAuction.getInfoBid().then(function(info){\n                $scope.nextBid = new Date(info.nextbid);\n                $scope.help.nextBid = $scope.nextBid.getTime();\n                $scope.totalBids = info.totalbids;\n                $scope.totalFaults = info.faults;\n                $scope.unqualified = info.unqualified;\n                $element.find('.delay-bid').empty().append('<timer interval=\"1000\" language=\"es\"  class=\"subasta-tiempo\" '+\n                                  '  end-time=\"nextBid\">' +\n                                      '  <small>Puedes ofertar en</small><br>{{minutes}} min, {{seconds}} seg '+\n                                \"</timer>\");\n                $compile($element.find('.delay-bid'))($scope);\n            });\n    };\n    $scope.getInfo();\n    $scope.placeBid = function(){\n        $scope.objAuction.placeBid($scope.rangeOferta.max).then(function(data) {\n            $scope.objAuction.refresh();\n            $scope.getInfo();\n        });\n    };\n    $scope.objAuction.selfUpdate(1000, $scope);\n});"],"sourceRoot":"/source/"}