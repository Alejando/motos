{"version":3,"sources":["public.js","ModelBase.js","models/AuctionModel.js","models/Paginacion.js","models/User.js","indexCtrl.js"],"names":[],"mappingsrxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"public.js","sourcesContent":["var glimglam = angular.module(\"glimglam\", []); ","glimglam.factory('ModelBase', function (Paginacion, $q, $http, $timeout) {\n    //<editor-fold defaultstate=\"collapsed\" desc=\"constructor\">\n    var ModelBase = function (args) {\n        this.setProperties(args);\n        this.relations = {};\n    };\n    //</editor-fold>\n    //<editor-fold defaultstate=\"collapsed\" desc=\"Metodos de Instancia (prototype)\">\n    ModelBase.prototype = {\n        //<editor-fold defaultstate=\"collapsed\" desc=\"setProperties\">\n        setProperties: function (data) {            \n            var self = this;\n            var atributes = self.model().attributes; \n            var setters = self.model().setters;\n            angular.forEach(atributes, function (attr) {\n                if(setters[attr]){\n                    self[attr] = setters[attr].apply(self,[data[attr]]);\n                    return;\n                }\n                self[attr] = data[attr];\n            });\n        },\n        getProperties : function () {\n            var self = this;\n            var data = {};\n            var attributes = self.model().attributes;\n            angular.forEach(attributes, function (attr){\n                data[attr] = self[attr];\n            });\n            return data;\n        },\n        create : function () {\n            var  data = this.getProperties();\n            var model = this.model();\n            var self = this;\n            var url = laroute.route(model.aliasUrl());        \n            var $defer = $q.defer();\n            $http({\n                'method' : 'POST',\n                'data' : data,\n                'url' : url\n            }).then(function(result) {\n                self.setProperties(result.data.model);\n                instancias =model.model().addCache(self);\n                $defer.resolve(model);\n            },function(r){\n                $defer.reject(r);\n            });\n            return $defer.promise;\n        },\n        update : function () {\n            console.log(\"Flata implementar actualizacion\");\n        },\n        save : function () {\n            if(this.id){\n                return this.update();\n            }\n            return this.create();\n        \n        },\n        getter : function (key){\n            return this[\"_obj_\" + key];\n        },\n        hasMany : function (Model, key) {\n            var self = this;\n            var defer = $q.defer();\n            var url = laroute.route(self.model().aliasUrl()  + '.relation',{\n                'id' : self.id,\n                'relation' :  key\n            });\n            $http({\n                'method' : 'GET',\n                'url' : url\n            }).then(function(result){                \n                var instancias = Model.build(result.data);\n                self.relations[key] = instancias;\n                defer .resolve(instancias);                                \n            },function(r) {                \n                defer .reject(r);\n            });\n            return defer.promise;\n        },\n        belongsTo : function (Model, key) {            \n            var self = this;\n            var defer = $q.defer();\n            var id = this[key + \"_id\"];\n            if(id) {\n                Model.getById(id).then(function(entidad) {                                  \n                    self.relations[key] = entidad;                         \n                    defer.resolve(entidad);\n                }, function(r){\n                    defer.reject(r);\n                });\n            } else {\n                $timeout(function() {\n                    defer.reject();\n                }, 10);\n            }\n            \n            return defer.promise;\n        }\n        //</editor-fold>\n    };\n    //</editor-fold>\n    //<editor-fold defaultstate=\"collapsed\" desc=\"Metodos Estaticos\">\n    ModelBase.findCache = function(obj){        \n        var cache = this.model().cache;                       \n        obj = cache[obj.id];\n        if(obj){\n            return obj;\n        } else {\n            return false;\n        }\n    };\n    //Helper para setear fechas \n    ModelBase.setDate = function (value) {\n        if(angular.isString(value)) {\n            return new Date(value);\n        }\n        return value;\n    };\n    ModelBase.model = function () {\n        return this.prototype.model();\n    };\n    ModelBase.getCache = function () {\n        return this.cache;\n    };    \n    ModelBase.RELATIONS = {\n        KEY : 0,\n        MODEL : 1,\n        FUNCTION : 2\n    };\n    \n    ModelBase.addRelation = function (key, fnModel, fn) {\n        var model = this.model();        \n        if(angular.isString(fn)){//funciones de relaciones por defecto                \n            switch(fn){\n                case 'belongsTo' : fn = function () {                           \n                        return this.belongsTo(fnModel, key);\n                    };\n                    model.attributes.push(key + \"_id\");\n                    break;\n                case 'hasMany' : fn = function () {                              \n                        return this.hasMany(fnModel, key);\n                    };\n                break;\n            }                \n        } \n        model.prototype[key] = fn;\n    };\n    \n    ModelBase.createModel = function (model, statics, prototype) {\n        angular.extend(model.prototype, ModelBase.prototype, prototype);\n        angular.extend(model, ModelBase, statics);\n        model.prototype.model = function () {            \n            return model;\n        };\n        model.cache = [];\n        angular.forEach(model.relations, function(v){            \n            var key = v[ModelBase.RELATIONS.KEY];            \n            var fn = v[ModelBase.RELATIONS.FUNCTION];\n            var fnModel = v[ModelBase.RELATIONS.MODEL];\n            model.addRelation(key,fnModel,fn);\n        });\n//        console.log(\"models->\"+model.attributes);\n        return model;\n    };\n    ModelBase.aliasUrl = function () {\n        return this.alias;\n    };\n    ModelBase.addCache = function(obj) {        \n        var Model = this.model();        \n        var cache = Model.getCache();\n        cache[obj.id] = obj;        \n        return obj;\n    };\n    //<editor-fold defaultstate=\"collapsed\" desc=\"build\">\n    ModelBase.build = function (data) {        \n        var Model = this.model(), obj;\n        if (angular.isArray(data)) {            \n            var arrInst = [];\n            var i=0;\n            angular.forEach(data, function (d) {                \n                obj = Model.findCache(d);                                \n                if(obj) {\n                    arrInst.push(obj);\n                    i++;\n                    console.log(\"ya en cache \" +i);\n                } else {\n                    obj = Model.addCache(new Model(d));  \n                    arrInst.push(obj);\n                }\n            });\n//            console.log(arrInst);\n            return arrInst;\n        }\n        obj = Model.findCache(data);\n        if(obj) {              \n            return obj;\n        } else {                        \n            obj = Model.addCache(new Model(data));\n        }\n        \n        return obj;\n    };\n    //</editor-fold>\n    //<editor-fold defaultstate=\"collapsed\" desc=\"getAll\">\n    ModelBase.getAll = function () {\n        var self = this.model();\n        var url = laroute.route(this.aliasUrl());        \n        var $defer = $q.defer();\n        $http({\n            'method' : 'GET',\n            'params' : {\n                'paginacion' : false\n            },\n            'url' : url\n        }).then(function(result) {\n            var instancias =self.model().build(result.data);\n            $defer.resolve(instancias);\n        },function(r){\n            $defer.reject(r);\n        });\n        return $defer.promise;\n    };\n    //</editor-fold>\n    //<editor-fold defaultstate=\"collapsed\" desc=\"paginado\">\n    ModelBase.paginado = function () {            \n        var self = this;        \n        var url = laroute.route(this.aliasUrl());\n        var $defer = $q.defer();        \n        $http({\n            'method' : 'GET',\n            'params' : { \n                'paginacion' : true\n            },\n            'url' : url\n        }).then(function(result) {\n            var arrInst = [], pojsos, paginacion;            \n                pojsos = result.data.data;\n                paginacion = new Paginacion.build(result.data, self.model());\n            $defer.resolve({\n                'instancias': arrInst,\n                'paginacion' : paginacion\n            });\n        });\n        return $defer.promise;\n    };\n    //</editor-fold>\n    ModelBase.remove = function () {\n        console.log(\"pediente crear metodo de eliminacion\");\n    };\n    ModelBase.save  = function () {\n        console.log(\"pendiente crear método de creacion/actualizacion\");\n    };\n    //<editor-fold defaultstate=\"collapsed\" desc=\"getURLForAllDataTables\">\n    ModelBase.getURLForAllDataTables = function () {\n        var self = this;\n        var url = laroute.route(self.model().aliasUrl()  + '.all-for-datatables', {});\n        return url;\n    };\n    //</editor-fold>\n    //<editor-fold defaultstate=\"collapsed\" desc=\"getallForDataTables\">\n    ModelBase.getAllForDataTables = function() {\n        var self = this;\n        var url = self.getURLForAllDataTables();\n        var $defer = $q.defer();\n        $http({\n            'method' : 'GET',\n            'url' : url\n        }).then(function(result) {\n            $defer.resolve(result.data);\n        });\n        return $defer.promise;\n    };\n    //</editor-fold>\n    //<editor-fold defaultstate=\"collapsed\" desc=\"getById\">\n    ModelBase.getById = function(id, args) {        \n        var data = angular.extend(args || {} , {\n            id : id\n        });        \n        var self = this; \n        var $defer = $q.defer();                \n        var objCache = self.model().findCache(data);     \n//        console.log(objCache);\n        if(objCache !== false) {\n            $timeout(function() {\n                $defer.resolve(objCache);\n            }, 10);\n        } else {   \n            data = {};\n            data[this.aliasUrl()] = id;\n            var url = laroute.route(this.aliasUrl() + '.show', data);            \n            $http({\n                'method' : 'GET',\n                'url' : url\n            }).then(function(result) {\n                var instancias = self.model().build(result.data);\n                $defer.resolve(instancias);\n            }, function(r) {                \n                $defer.reject(r);\n            });\n        }\n        return $defer.promise;\n    };\n    //</editor-fold>\n    //</editor-fold>\n    return ModelBase;\n});\n","glimglam.factory('Auction', function (ModelBase,$q,$http) {    \n    var Auction = function (args) {\n        ModelBase.apply(this, arguments);\n    };\n    ModelBase.createModel(Auction , {   \n        FINISHED : 2,\n        STARTED : 1,\n        STAND_BY : 0,\n        //Tipos de portadas\n        COVER_HORIZOTAL : 'horizontal',\n        COVER_VERTICAL : 'vertical',\n        COVER_SLIDER_UPCOMING :'slider-upcoming',\n        alias: 'auction',\n        setters : {\n            startDate : ModelBase.setDate,\n            endDate : ModelBase.setDate\n        },\n        attributes: [\n            'id',\n            'title',\n            'code',\n            'description',\n            'maxBid',\n            'minBid',\n            'maxOffer',\n            'userTop',\n            'delay',\n            'target',\n            'startDate',\n            'endDate',\n            'published',\n            'status',\n            'totalEnrollments',\n            'inflows',\n            'soldFor',\n            'winner'\n        ],\n        relations : [],\n        getByCode : function (code){\n            var $defer = $q.defer();\n            var url = laroute.route('auction.getByCode', {\n                'code' : code\n            });\n            var self = this;\n            $http({\n                'method' : 'GET',\n                'url' :  url\n            }).then(function(result){\n                $defer.resolve(self.build(result.data));\n            });\n            return $defer.promise;\n        },\n        getUpcoming : function (n) {\n            var url = laroute.route('auction.upcoming', {\n                n:n\n            });\n            var $defer = $q.defer();\n            var self = this;\n            $http({\n                'method' : 'GET',\n                'url' :  url\n            }).then(function(result){\n                $defer.resolve(self.build(result.data));\n            });\n            return $defer.promise;\n        }\n    }, {\n        \n        getUrlCover : function (version) {\n            var url = laroute.route('auction.getCover',{\n                version:version,\n                code: this.code\n            });\n            return url;\n        },\n        getStartDate : function () {\n            return \"Fecha de inicio\";\n        },\n        getEndDate : function () {\n            return \"Fecha de Termino\";\n        },\n        getStatusStr : function () {\n           switch(this.status) {\n               case Auction.STARTED: return \"Iniciada\";\n               case Auction.FINISHED: return \"Terminada\";\n               case Auction.STAND_BY: return \"En espera\";\n           }\n        }\n    });    \n    //<editor-fold defaultstate=\"collapsed\" desc=\"buscarFolio\">\n    return Auction;\n});","/* global angular, glimglam */\nglimglam.factory('Paginacion', function () {\n    var Paginacion = function (args) {        \n        this.setPropieties(args);\n    };\n    //Se hereda el prototipo base y se agregan los metodos personalizados\n    Paginacion.prototype = {\n        setPropieties: function (data) {            \n            var self = this;\n            var atributes = this.getAttributes();\n            angular.forEach(atributes, function (value) {                \n                self[value] = data[value];\n            });\n        },\n        getAttributes: function () {\n            return [\n                'current_page',\n                'from',\n                'last_page',\n                'next_page_url',\n                'per_page',\n                'prev_page_url',\n                'to',\n                'total'\n            ];\n        }\n    };\n    Paginacion.build = function (data) {        \n        return new Paginacion(data);\n    };\n    return Paginacion;\n});","glimglam.factory('User', function (ModelBase,$q,$http) {    \n    var User = function (args) {\n        ModelBase.apply(this, arguments);\n    };\n    ModelBase.createModel(User , {   \n        FINISHED : 2,\n        STARTED : 1,\n        STAND_BY : 0,\n        alias: 'user',\n//        cache : [],\n        setters : {\n            startDate : ModelBase.setDate,\n            endDate : ModelBase.setDate\n        },\n        attributes: [\n            'id',\n            'name',\n            'email'\n        ],\n        relations : []\n    }, {\n    });    \n    //<editor-fold defaultstate=\"collapsed\" desc=\"buscarFolio\">\n    return User;\n});","glimglam.controller('public.IndexCtrl', function ($scope, Auction) {\n    $scope.titulo = \"Hello\";\n    window.Auction = Auction;\n    Auction.getAll().then(function(all) {\n        console.log(all);\n    });\n    Auction.getByCode(\"SUB-001\").then(function(byCode) {\n        console.log(\"Auction byCode=> %o\", byCode);\n        console.log(\"cover horizontal => %o\", byCode.getUrlCover(Auction.COVER_HORIZOTAL));\n        console.log(\"cover vertical => %o\", byCode.getUrlCover(Auction.COVER_VERTICAL));\n        console.log('cover slider => %o',  byCode.getUrlCover(Auction.COVER_SLIDER_UPCOMING));\n    });\n    Auction.getUpcoming(10).then(function(auctions) {\n        console.log('diez proximas => %o', auctions);\n    });\n    Auction.getPage().then(function(result) {\n        console.log(result);\n    });\n    console.log(\"controlador Index\");\n    $scope.$parent.subSeccion = \"Actualización Masiva\";\n});"],"sourceRoot":"/source/"}