{"version":3,"sources":["app.js","directives/currencyOnly.js","directives/fileread.js","directives/numbersOnly.js","directives/owlCarousel.js","factory/ModelBase.js","factory/Models/BrandModel.js","factory/Models/CategoryModel.js","factory/Models/ColorModel.js","factory/Models/Paginacion.js","factory/Models/ProductoModel.js","factory/Models/ProfileModel.js","factory/Models/SizeModel.js","factory/Models/StockModel.js","factory/Models/UserModel.js","ProductDetailsCtrl.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC7CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACpEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjpgBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClhBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"web-angular.js","sourcesContent":["var setpoint = angular.module('setpoint', [\r\n    'slugifier',\r\n    'angular-owl-carousel'\r\n]);","//Fork of http://jsfiddle.net/jamseernj/6guy3sp9/\r\nsetpoint.directive('currencyOnly', function() {\r\n      return {\r\n        require: '?ngModel',\r\n        link: function(scope, element, attrs, ngModelCtrl) {\r\n          if(!ngModelCtrl) {\r\n            return; \r\n          }\r\n\r\n          ngModelCtrl.$parsers.push(function(val) {\r\n            if (angular.isUndefined(val)) {\r\n                var val = '';\r\n            }\r\n            \r\n            var clean = val.replace(/[^-0-9\\.]/g, '');\r\n            var negativeCheck = clean.split('-');\r\n\t\t\tvar decimalCheck = clean.split('.');\r\n            if(!angular.isUndefined(negativeCheck[1])) {\r\n                negativeCheck[1] = negativeCheck[1].slice(0, negativeCheck[1].length);\r\n                clean =negativeCheck[0] + '-' + negativeCheck[1];\r\n                if(negativeCheck[0].length > 0) {\r\n                \tclean =negativeCheck[0];\r\n                }\r\n                \r\n            }\r\n              \r\n            if(!angular.isUndefined(decimalCheck[1])) {\r\n                decimalCheck[1] = decimalCheck[1].slice(0,2);\r\n                clean =decimalCheck[0] + '.' + decimalCheck[1];\r\n            }\r\n\r\n            if (val !== clean) {\r\n              ngModelCtrl.$setViewValue(clean);\r\n              ngModelCtrl.$render();\r\n            }\r\n            return clean;\r\n          });\r\n\r\n          element.bind('keypress', function(event) {\r\n            if(event.keyCode === 32) {\r\n              event.preventDefault();\r\n            }\r\n          });\r\n        }\r\n      };\r\n  });","setpoint.directive(\"fileread\", [function () {\r\n    return {\r\n        scope: {\r\n            fileread: \"=\",\r\n            onselectfile: \"=\"\r\n        },\r\n        link: function (scope, element, attributes) {\r\n            element.bind(\"change\", function (changeEvent) {\r\n\r\n                if(scope.onselectfile){\r\n                    scope.onselectfile(changeEvent,event.target.files);\r\n                }\r\n                if(event.target.files[0]){\r\n                    scope.fileread = event.target.files[0];\r\n                }\r\n//                var reader = new FileReader();\r\n//                reader.onload = function (loadEvent) {\r\n//                    scope.$apply(function () {\r\n//                        scope.fileread = loadEvent.target.result;\r\n//                    });\r\n//                }\r\n//                reader.readAsDataURL(changeEvent.target.files[0]);\r\n            });\r\n        }\r\n    }\r\n}]);\r\n\r\nsetpoint.directive('filesDagAndDrop',[\r\n    function (){\r\n        return {\r\n            scope : {\r\n                fileread: \"=\",\r\n                onselectfile: \"=\"\r\n            },\r\n            link : function(scope, element, attributes){\r\n                var inputFile = angular.element(\r\n                    '<input type=\"file\" multiple accept=\".jpg,.png\" style=\"display:none\">'\r\n                );\r\n\r\n                element.append(inputFile);\r\n\r\n                inputFile.bind('click', function(e) {\r\n                     e.stopPropagation();\r\n                });\r\n\r\n                inputFile.bind('change', function(e) {\r\n                    scope.onselectfile(this.files);\r\n                    e.stopPropagation();\r\n                });\r\n\r\n                element.bind('click', function ($event) {\r\n                    $(inputFile).click();\r\n                    $event.preventDefault();\r\n                });\r\n\r\n                element.bind('drop',function($event) {\r\n                    scope.onselectfile($event.originalEvent.dataTransfer.files);\r\n                    //element.find('input').val('');\r\n                    $event.preventDefault();\r\n                });\r\n\r\n                element.bind('dragover', function ($event) {\r\n                    $event.preventDefault();\r\n                });\r\n            }\r\n        }\r\n    }\r\n]);\r\n","//fork: http://codepen.io/apuchkov/pen/ILjFr\r\nsetpoint.directive('numbersOnly', function () {\r\n    return {\r\n        require: 'ngModel',\r\n        link: function (scope, element, attr, ngModelCtrl) {\r\n            function fromUser(text) {\r\n                if (text) {\r\n                    var transformedInput = text.replace(/[^0-9]/g, '');\r\n                    if (transformedInput !== text) {\r\n                        ngModelCtrl.$setViewValue(transformedInput);\r\n                        ngModelCtrl.$render();\r\n                    }\r\n                    return transformedInput;\r\n                }\r\n                return undefined;\r\n            }            \r\n            ngModelCtrl.$parsers.push(fromUser);\r\n        }\r\n    };\r\n});","//http://embed.plnkr.co/pOIh2mOkj9N5HajbiC9h/\r\nsetpoint.directive(\"owlCarousel\", function() {\r\n\treturn {\r\n\t\trestrict: 'E',\r\n\t\ttransclude: false,\r\n\t\tlink: function (scope) {\r\n\t\t\tscope.initCarousel = function(element) {\r\n\t\t\t  // provide any default options you want\r\n\t\t\t\tvar defaultOptions = {\r\n\t\t\t\t};\r\n\t\t\t\tvar customOptions = scope.$eval($(element).attr('data-options'));\r\n\t\t\t\t// combine the two options objects\r\n\t\t\t\tfor(var key in customOptions) {\r\n\t\t\t\t\tdefaultOptions[key] = customOptions[key];\r\n\t\t\t\t}\r\n\t\t\t\t// init carousel\r\n\t\t\t\t$(element).owlCarousel(defaultOptions);\r\n\t\t\t};\r\n\t\t}\r\n\t};\r\n})\r\n.directive('owlCarouselItem', [function() {\r\n\treturn {\r\n\t\trestrict: 'A',\r\n\t\ttransclude: false,\r\n\t\tlink: function(scope, element) {\r\n\t\t  // wait for the last item in the ng-repeat then call init\r\n\t\t\tif(scope.$last) {\r\n\t\t\t\tscope.initCarousel(element.parent());\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n}]);\r\n","setpoint.factory('ModelBase', function (Paginacion, $q, $http, $timeout, $interval, $filter) {\r\n    //<editor-fold defaultstate=\"collapsed\" desc=\"constructor\">\r\n    var ModelBase = function (args) {\r\n        this.setProperties(args);\r\n        this.relations = {};\r\n        this._bk_attrs = {};\r\n        this._FILES = false;\r\n    };\r\n    //</editor-fold>\r\n    //<editor-fold defaultstate=\"collapsed\" desc=\"Metodos de Instancia (prototype)\">\r\n    ModelBase.prototype = {\r\n        addFile : function (name, data) {\r\n            if(!this._FILES){\r\n                this._FILES = {};\r\n            }\r\n            this._FILES[name] = data;\r\n        },\r\n        backup : function() {\r\n            var self = this;\r\n            var attributes = self.model().attributes; \r\n            angular.forEach(attributes, function(attr){\r\n                self._bk_attrs[attr] = self[attr];\r\n            });\r\n            return this;\r\n        },\r\n        rollback : function() {\r\n            var self = this;\r\n            angular.forEach(self._bk_attrs, function(i ,attr){\r\n                self[attr] = self._bk_attrs[attr];\r\n            });\r\n            return this;\r\n        },\r\n        //<editor-fold defaultstate=\"collapsed\" desc=\"setProperties\">\r\n        setProperties: function (data) {            \r\n            var self = this;\r\n            var atributes = self.model().attributes; \r\n            var setters = self.model().setters;\r\n            angular.forEach(atributes, function (attr) {\r\n                if(setters && setters[attr]){\r\n                    self[attr] = setters[attr].apply(self,[data[attr]]);\r\n                    return;\r\n                }\r\n                self[attr] = data[attr];\r\n            });\r\n        },\r\n        selfUpdate : function (milisecons, $scope) {  \r\n            var self = this;\r\n            $interval(function() {\r\n                console.log(\"Inicia --- re\", milisecons);\r\n                self.refresh();\r\n            },milisecons);            \r\n        },\r\n        refresh : function () {\r\n            var data = {};\r\n            var self = this;\r\n            var $defer =  $q.defer();\r\n            var model = this.model();\r\n            data[model.aliasUrl()] = this.id;\r\n            var url = laroute.route(model.aliasUrl() + '.show', data);            \r\n            $http({\r\n                'method' : 'GET',\r\n                'url' : url\r\n            }).then(function(result) {\r\n                self.setProperties(result.data);\r\n            }, function(r) {                \r\n                $defer.reject(r);\r\n            });\r\n            return $defer;\r\n        },\r\n        getProperties : function () {\r\n            var self = this;\r\n            var data = {};\r\n            var attributes = self.model().attributes;\r\n            angular.forEach(attributes, function (attr){\r\n                data[attr] = self[attr];\r\n            });\r\n            return data;\r\n        },\r\n        create : function () {\r\n            var  data = this.getProperties();\r\n            var model = this.model();\r\n            var self = this;\r\n            var url = laroute.route(model.aliasUrl());        \r\n            var $defer = $q.defer();\r\n            $http({\r\n                'method' : 'POST',\r\n                'data' : data,\r\n                'url' : url\r\n            }).then(function(result) {\r\n                self.setProperties(result.data.model);\r\n                instancias =model.model().addCache(self);\r\n                $defer.resolve(model);\r\n            },function(r){\r\n                $defer.reject(r);\r\n            });\r\n            return $defer.promise;\r\n        },\r\n        update : function () {\r\n            var self = this;\r\n            var data = {};\r\n            var atributes = self.model().attributes; \r\n            var preparers = self.model().preparers;\r\n            angular.forEach(atributes, function (attr) {\r\n                if(preparers && preparers[attr]){\r\n                    console.log(attr);\r\n                    data[attr] = preparers[attr].apply(self,[self[attr]]);\r\n                    return;\r\n                }\r\n                data[attr] = self[attr];\r\n            });\r\n            var alias= this.model().alias;\r\n            var relations = this.model().conf_relations;\r\n            angular.forEach(relations, function (conf, relation) {\r\n                if(conf[ModelBase.RELATIONS.FUNCTION] === \"hasMany\") {\r\n                    data[relation] = [];\r\n                    angular.forEach(self[relation + \"_ids\"], function(item){\r\n                        data[relation].push(item);\r\n                    });\r\n                } else if(conf[ModelBase.RELATIONS.FUNCTION] ==='x') {\r\n                    \r\n                }\r\n            });\r\n            \r\n            var datalaroute = {};\r\n            datalaroute[alias] = this.id;\r\n            var url = laroute.route(alias+'.update', datalaroute);\r\n            var $def = $q.defer();\r\n            $http({\r\n                url : url,\r\n                method : 'PUT',\r\n                data : data\r\n            }).then(function(r){\r\n                $def.resolve(r.data);\r\n            });\r\n            return $def.promise;\r\n        },\r\n        saveWithFiles : function () {\r\n            var $def = $q.defer();\r\n            var self = this;\r\n            var fd = new FormData();\r\n            var model = this.model();\r\n            var data = this.getProperties();\r\n            var url = laroute.route(model.aliasUrl()); \r\n            angular.forEach(this._FILES,function(file, name) { \r\n                fd.append(name, file);\r\n            });\r\n            var relations = this.model().conf_relations;\r\n            angular.forEach(relations, function (conf, relation) {\r\n                if(conf[ModelBase.RELATIONS.FUNCTION] === \"hasMany\") {\r\n                    angular.forEach(self[relation+\"_ids\"], function(item){\r\n                        fd.append(relation + \"[]\", item);\r\n                    });\r\n                } else if(conf[ModelBase.RELATIONS.FUNCTION] ==='x') {\r\n                    \r\n                }\r\n            });\r\n            angular.forEach(data, function (value, field) {\r\n                if(value!==undefined) {\r\n                    if(angular.isArray(value)){\r\n                        angular.forEach(value,function(item) {\r\n                            fd.append(field+\"[]\", item);\r\n                        });\r\n                    } else {\r\n                        fd.append(field, value);  \r\n                    }\r\n                }\r\n            }); \r\n            $http.post(url,fd, {\r\n                transformRequest: angular.identity,\r\n                headers: {'Content-Type': undefined}\r\n            }).success(function(){\r\n                $def.resolve();\r\n            }).error(function(){\r\n                $def.reject() \r\n           });\r\n            return $def.promise;\r\n        },\r\n        save : function () {\r\n            if(this._FILES) {\r\n                return this.saveWithFiles();\r\n            }\r\n            if(this.id){\r\n                return this.update();\r\n            }\r\n            return this.create();\r\n        \r\n        },\r\n        detach : function (strRelation, entity) {\r\n            var fn = this.model().conf_relations[strRelation][ModelBase.RELATIONS.FUNCTION];\r\n            if(fn === \"hasMany\"){\r\n                var index = this.relations[strRelation].indexOf(entity);\r\n                if(index != -1) {\r\n                    this.relations[strRelation].splice(index,1);\r\n                }\r\n                index = this[strRelation + \"_ids\"].indexOf(entity.id);\r\n                if(index !=-1) {\r\n                    this[strRelation + \"_ids\"].splice(index,1);\r\n                }\r\n            }else {\r\n                throw Error(strRelation + \" Fn no implementada\");\r\n            }\r\n            return this;\r\n        },\r\n        relate : function (strRelation, entity) {\r\n            var fn = this.model().conf_relations[strRelation][ModelBase.RELATIONS.FUNCTION];\r\n            if(fn === \"hasMany\"){\r\n                if(this.relations[strRelation]==undefined) {\r\n                    this.relations[strRelation] = [];\r\n                    this[strRelation + \"_ids\"] = [];\r\n                }\r\n                this.relations[strRelation].push(entity);\r\n                this[strRelation + \"_ids\"].push(entity.id);\r\n            } else if(fn === \"belongsTo\") {\r\n                this.relations[strRelation] = entity;\r\n                this[strRelation +\"_id\"] = entity.id;\r\n            } else {\r\n                throw Error(strRelation + \" Fn no implementada\");\r\n            }\r\n            return this;\r\n        },\r\n        remove : function() {\r\n            var model = this.model();\r\n            var url = laroute.route(model.aliasUrl())+\"/\"+this.id;        \r\n            var $defer = $q.defer();\r\n            $http({\r\n                'method' : 'DELETE',\r\n                'url' : url\r\n            }).then(function(result) {\r\n                //Todo implemenetar elminar de cache\r\n                $defer.resolve(result);\r\n            },function(r){\r\n                $defer.reject(r);\r\n            });\r\n            return $defer.promise;\r\n        },\r\n        getter : function (key){\r\n            return this[\"_obj_\" + key];\r\n        },\r\n        hasMany : function (Model, key) {\r\n            var self = this;\r\n            var defer = $q.defer();\r\n            if(self.id){\r\n                var url = laroute.route(self.model().aliasUrl()  + '.relation',{\r\n                    'id' : self.id,\r\n                    'relation' :  key\r\n                });\r\n                $http({\r\n                    'method' : 'GET',\r\n                    'url' : url\r\n                }).then(function(result){                \r\n                    var arrIds = [];\r\n                    var instancias = Model.build(result.data, function(obj){\r\n                        arrIds.push(obj.id);\r\n                    });\r\n                    self.relations[key] = instancias;\r\n                    self[key+\"_ids\"] = arrIds;\r\n                    defer .resolve(instancias);                                \r\n                },function(r) {                \r\n                    defer .reject(r);\r\n                });\r\n            } else {\r\n                $timeout(function(){\r\n                    defer .resolve([]);\r\n                });\r\n            }\r\n            return defer.promise;\r\n        },\r\n        belongsTo : function (Model, key) {\r\n            console.log(\"ok\");\r\n            var self = this;\r\n            var defer = $q.defer();\r\n            var id = this[key + \"_id\"];\r\n            if(id) {\r\n                Model.getById(id).then(function(entidad) {                                  \r\n                    self.relations[key] = entidad;                         \r\n                    defer.resolve(entidad);\r\n                }, function(r){\r\n                    defer.reject(r);\r\n                });\r\n            } else {\r\n                $timeout(function() {\r\n                    defer.reject();\r\n                }, 10);\r\n            }\r\n            \r\n            return defer.promise;\r\n        }\r\n        //</editor-fold>\r\n    };\r\n    //</editor-fold>\r\n    //<editor-fold defaultstate=\"collapsed\" desc=\"Metodos Estaticos\">\r\n    ModelBase.findCache = function(obj){        \r\n        var cache = this.model().cache;                       \r\n        obj = cache[obj.id];\r\n        if(obj){\r\n            return obj;\r\n        } else {\r\n            return false;\r\n        }\r\n    };\r\n    ModelBase.setFloat = function (value) {\r\n        if(value){\r\n            return parseFloat(value);\r\n        }\r\n        return undefined;\r\n    },\r\n    //Helper para setear fechas \r\n   \r\n    ModelBase.setDate = function (value) {\r\n        if(angular.isString(value)) {\r\n            var date = new Date(value);\r\n            if(isNaN(date.getTime())){\r\n                return null;\r\n            }\r\n            return date;\r\n        }\r\n        return value;\r\n    };\r\n    ModelBase.prepareDate = function (date){\r\n        var dateTemp = new Date(date);\r\n        dateTemp.setHours(0);\r\n        dateTemp.setMinutes(0);\r\n        dateTemp.setSeconds(0);\r\n        if(dateTemp.getTime && !isNaN(dateTemp.getTime())){\r\n            return $filter('date')(dateTemp,'yyyy-MM-ddTHH:mm:ssZ');;\r\n        } else {\r\n            return undefined;\r\n        }\r\n    };\r\n    ModelBase.model = function () {\r\n        return this.prototype.model();\r\n    };\r\n    ModelBase.getCache = function () {\r\n        return this.cache;\r\n    };    \r\n    ModelBase.RELATIONS = {\r\n        KEY : 0,\r\n        MODEL : 1,\r\n        FUNCTION : 2\r\n    };\r\n    \r\n    ModelBase.addRelation = function (key, fnModel, fn) {\r\n        var model = this.model();        \r\n        if(angular.isString(fn)){//funciones de relaciones por defecto                \r\n            switch(fn){\r\n                case 'belongsTo' :\r\n                    fn = function () {                           \r\n                        return this.belongsTo(fnModel, key);\r\n                    };\r\n                    model.attributes.push(key + \"_id\");\r\n                    break;\r\n                case 'hasMany' : \r\n                    fn = function () {                              \r\n                        return this.hasMany(fnModel, key);\r\n                    };\r\n                break;\r\n            }                \r\n        } \r\n        model.prototype[key] = fn;\r\n    };\r\n    \r\n    ModelBase.createModel = function (model, statics, prototype) {\r\n        angular.extend(model.prototype, ModelBase.prototype, prototype);\r\n        angular.extend(model, ModelBase, statics);\r\n        model.prototype.model = function () {            \r\n            return model;\r\n        };\r\n        model.cache = [];\r\n        model.conf_relations = {};\r\n        angular.forEach(model.relations, function(v){            \r\n            var key = v[ModelBase.RELATIONS.KEY];            \r\n            var fn = v[ModelBase.RELATIONS.FUNCTION];\r\n            var fnModel = v[ModelBase.RELATIONS.MODEL];\r\n            model.addRelation(key,fnModel,fn);\r\n            model.conf_relations[key] = v;\r\n        });\r\n//        console.log(\"models->\"+model.attributes);\r\n        return model;\r\n    };\r\n    ModelBase.aliasUrl = function () {\r\n        return this.alias;\r\n    };\r\n    ModelBase.addCache = function(obj) {        \r\n        var Model = this.model();        \r\n        var cache = Model.getCache();\r\n        cache[obj.id] = obj;        \r\n        return obj;\r\n    };\r\n    //<editor-fold defaultstate=\"collapsed\" desc=\"build\">\r\n    ModelBase.build = function (data, fnSteep) {        \r\n        if(fnSteep === undefined) {\r\n            fnSteep = $.noop;\r\n        }\r\n        var Model = this.model(), obj;\r\n        if (angular.isArray(data)) {            \r\n            var arrInst = [];\r\n            var i = 0;\r\n            angular.forEach(data, function (d) {                \r\n                obj = Model.findCache(d);                                \r\n                if(obj) {\r\n                    obj.setProperties(d);\r\n                    arrInst.push(obj);\r\n                    i++;\r\n                } else {\r\n                    obj = Model.addCache(new Model(d));  \r\n                    arrInst.push(obj);\r\n                }\r\n                fnSteep(obj);\r\n            });\r\n            return arrInst;\r\n        }\r\n        obj = Model.findCache(data);\r\n        if(!obj) {                   \r\n            obj = Model.addCache(new Model(data));\r\n        }\r\n        fnSteep(obj);\r\n        return obj;\r\n    };\r\n    //</editor-fold>\r\n    //<editor-fold defaultstate=\"collapsed\" desc=\"getAll\">\r\n    ModelBase.getAll = function () {\r\n        var self = this.model();\r\n        var url = laroute.route(this.aliasUrl());        \r\n        var $defer = $q.defer();\r\n        $http({\r\n            'method' : 'GET',\r\n            'params' : {\r\n                'paginacion' : false\r\n            },\r\n            'url' : url\r\n        }).then(function(result) {\r\n            var instancias =self.model().build(result.data);\r\n            $defer.resolve(instancias);\r\n        },function(r){\r\n            $defer.reject(r);\r\n        });\r\n        return $defer.promise;\r\n    };\r\n    //</editor-fold>\r\n    //<editor-fold defaultstate=\"collapsed\" desc=\"paginado\">\r\n    ModelBase.paginado = function () {            \r\n        var self = this;        \r\n        var url = laroute.route(this.aliasUrl());\r\n        var $defer = $q.defer();        \r\n        $http({\r\n            'method' : 'GET',\r\n            'params' : { \r\n                'paginacion' : true\r\n            },\r\n            'url' : url\r\n        }).then(function(result) {\r\n            var arrInst = [], pojsos, paginacion;            \r\n                pojsos = result.data.data;\r\n                paginacion = new Paginacion.build(result.data, self.model());\r\n            $defer.resolve({\r\n                'instancias': arrInst,\r\n                'paginacion' : paginacion\r\n            });\r\n        });\r\n        return $defer.promise;\r\n    };\r\n    //</editor-fold>\r\n    //<editor-fold defaultstate=\"collapsed\" desc=\"getURLForAllDataTables\">\r\n    ModelBase.getURLForAllDataTables = function () {\r\n        var self = this;\r\n        var url = laroute.route(self.model().aliasUrl()  + '.all-for-datatables', {});\r\n        return url;\r\n    };\r\n    //</editor-fold>\r\n    //<editor-fold defaultstate=\"collapsed\" desc=\"getallForDataTables\">\r\n    ModelBase.getAllForDataTables = function() {\r\n        var self = this;\r\n        var url = self.getURLForAllDataTables();\r\n        var $defer = $q.defer();\r\n        $http({\r\n            'method' : 'GET',\r\n            'url' : url\r\n        }).then(function(result) {\r\n            $defer.resolve(result.data);\r\n        });\r\n        return $defer.promise;\r\n    };\r\n    //</editor-fold>\r\n    //<editor-fold defaultstate=\"collapsed\" desc=\"getById\">\r\n    ModelBase.getById = function(id, args) {        \r\n        var data = angular.extend(args || {} , {\r\n            id : id\r\n        });        \r\n        var self = this; \r\n        var $defer = $q.defer();                \r\n        var objCache = self.model().findCache(data);     \r\n//        console.log(objCache);\r\n        if(objCache !== false) {\r\n            $timeout(function() {\r\n                $defer.resolve(objCache);\r\n            }, 10);\r\n        } else {   \r\n            data = {};\r\n            data[this.aliasUrl()] = id;\r\n            var url = laroute.route(this.aliasUrl() + '.show', data);            \r\n            $http({\r\n                'method' : 'GET',\r\n                'url' : url\r\n            }).then(function(result) {\r\n                var instancias = self.model().build(result.data);\r\n                $defer.resolve(instancias);\r\n            }, function(r) {                \r\n                $defer.reject(r);\r\n            });\r\n        }\r\n        return $defer.promise;\r\n    };\r\n    //</editor-fold>\r\n    //</editor-fold>\r\n    return ModelBase;\r\n});\r\n","setpoint.factory('Brand', function (ModelBase,$q,$http, Slug) {    \r\n    var Brand = function (args) {\r\n        ModelBase.apply(this, arguments);\r\n    };\r\n    ModelBase.createModel(Brand , {   \r\n        alias: 'brand',\r\n        setters : {\r\n        },\r\n        attributes: [\r\n            'id',\r\n            'name'\r\n        ],\r\n        relations : []\r\n    }, {\r\n        getLogo : function (w, h) {\r\n            var url = laroute.route('brand.getLogo',{\r\n                slugSEO : Slug.slugify(this.name) + \"-\",\r\n                id : this.id,\r\n                width : w,\r\n                heigth :  h\r\n            });\r\n            return url;\r\n        }\r\n    });\r\n    return Brand;\r\n});","setpoint.factory('Category', function (ModelBase,$q,$http) {    \r\n    var Category = function (args) {\r\n        ModelBase.apply(this, arguments);\r\n    };\r\n    ModelBase.createModel(Category , {   \r\n        alias: 'category',\r\n        setters : {\r\n        },\r\n        attributes: [\r\n            'id',\r\n            'name',\r\n            'parent_category_id'\r\n        ],\r\n        relations : []\r\n    }, {\r\n    });\r\n    return Category;\r\n});","setpoint.factory('Color', function (ModelBase,$q,$http) {    \r\n    var Color = function (args) {\r\n        ModelBase.apply(this, arguments);\r\n    };\r\n    ModelBase.createModel(Color , {   \r\n        alias: 'color',\r\n        setters : {\r\n        },\r\n        attributes: [\r\n            'id',\r\n            'name',\r\n            'pref',\r\n            'rgb'\r\n        ],\r\n        relations : []\r\n    }, {\r\n    });\r\n    return Color;\r\n});","/* global angular, glimglam */\r\nsetpoint.factory('Paginacion', function () {\r\n    var Paginacion = function (args) {        \r\n        this.setPropieties(args);\r\n    };\r\n    //Se hereda el prototipo base y se agregan los metodos personalizados\r\n    Paginacion.prototype = {\r\n        setPropieties: function (data) {            \r\n            var self = this;\r\n            var atributes = this.getAttributes();\r\n            angular.forEach(atributes, function (value) {                \r\n                self[value] = data[value];\r\n            });\r\n        },\r\n        getAttributes: function () {\r\n            return [\r\n                'current_page',\r\n                'from',\r\n                'last_page',\r\n                'next_page_url',\r\n                'per_page',\r\n                'prev_page_url',\r\n                'to',\r\n                'total'\r\n            ];\r\n        }\r\n    };\r\n    Paginacion.build = function (data) {        \r\n        return new Paginacion(data);\r\n    };\r\n    return Paginacion;\r\n});","setpoint.factory('Product', function (ModelBase,$q,$http, Category, Color, Brand, Size) {\r\n    var Product = function (args) {\r\n        ModelBase.apply(this, arguments);\r\n    };\r\n    ModelBase.createModel(Product , {\r\n        alias: 'product',\r\n        setters : {\r\n        },\r\n        attributes: [\r\n            'id',\r\n            'name',\r\n            'code',\r\n            'slug',\r\n            'codebar',\r\n            'description',\r\n            'multi_galeries',\r\n//            'colors',\r\n//            'categoriesC',\r\n            'brand_id'\r\n        ],\r\n        relations : [\r\n            ['categories', Category, 'hasMany'],\r\n            ['sizes', Size, 'hasMany'],\r\n            ['colors', Color, 'hasMany'],\r\n            ['brand', Brand, 'belongsTo']\r\n        ],\r\n    }, {\r\n        renameImg : function () {\r\n            var $defer = $q.defer();\r\n            var url = laroute.route('product.renameImg', {\r\n                'id' : this.id\r\n            });\r\n            $http.put(url,{\r\n                img : img,\r\n                name : name\r\n            }).then(function (request){\r\n//                console.log(request);\r\n            });\r\n            $defer.promise;\r\n        },\r\n        removeImg : function (img) {\r\n            var $defer = $q.defer();\r\n            var url = laroute.route('product.getImgs', {\r\n                'id' : this.id\r\n            });\r\n            $http.delete(url,{\r\n                img : img\r\n            }).then(function (request){\r\n//                console.log(request);\r\n            });\r\n            $defer.promise;\r\n        },\r\n        getImg : function (img, width, height) {\r\n            var url = laroute.route('product.img', {\r\n                id : this.id,\r\n                width : width,\r\n                height: height,\r\n                img : img\r\n            });\r\n//            console.log(url);\r\n            return url;\r\n        },\r\n        getImgs : function () {\r\n            var $defer = $q.defer();\r\n            var url = laroute.route('product.getImgs', {\r\n                'id' : this.id\r\n            });\r\n            var self = this;\r\n            $http.get(url).then(function (request){\r\n                self.imgs = request.data;\r\n                $defer.resolve(request.data);\r\n            });\r\n            return $defer.promise;\r\n        }\r\n    });\r\n    return Product;\r\n});\r\n","setpoint.factory('Profile', function (ModelBase, $q, $http) {    \r\n    var Profile = function (args) {\r\n        ModelBase.apply(this, arguments);\r\n    };\r\n    ModelBase.createModel(Profile , {\r\n        alias: 'size',\r\n        setters : {\r\n        },\r\n        attributes: [\r\n            'id',\r\n            'name'\r\n        ],\r\n        relations : []\r\n    }, {\r\n    });\r\n    return Profile;\r\n});","setpoint.factory('Size', function (ModelBase,$q,$http) {    \r\n    var Size = function (args) {\r\n        ModelBase.apply(this, arguments);\r\n    };\r\n    ModelBase.createModel(Size , {   \r\n        alias: 'size',\r\n        setters : {\r\n        },\r\n        attributes: [\r\n            'id',\r\n            'name'\r\n        ],\r\n        relations : []\r\n    }, {\r\n    });\r\n    return Size;\r\n});","setpoint.factory('Stock', function (ModelBase, $q, $http,\r\n    Product,\r\n    Color,\r\n    Size) {\r\n    var Stock = function (args) {\r\n        ModelBase.apply(this, arguments);\r\n    };\r\n    ModelBase.createModel(Stock , {\r\n        alias: 'stock',\r\n        setters : {\r\n        },\r\n        attributes: [\r\n            'id',\r\n            'quantity',\r\n            'price',\r\n            'code',\r\n            'codebar'\r\n        ],\r\n        relations : [\r\n            ['product', Product, 'belongsTo'],\r\n            ['color', Color, 'belongsTo'],\r\n            ['size', Size, 'belongsTo']\r\n        ]\r\n    }, {\r\n    });\r\n    return Stock;\r\n});\r\n","setpoint.factory('User', function (ModelBase, $q, $http) {    \r\n    var User = function (args) {\r\n        ModelBase.apply(this, arguments);\r\n    };\r\n    ModelBase.createModel(User , {   \r\n        alias: 'user',\r\n        setters : {\r\n        },\r\n        attributes: [\r\n            'id',\r\n            'name',\r\n            'email',\r\n            'password',\r\n            'profile'\r\n        ],\r\n        relations : []\r\n    }, {\r\n        addBookmark: function(id_product){\r\n            var def = $q.defer();\r\n            var url = laroute.route('user.addBookmark', {'id_product':id_product});\r\n            $http.post(url).then(function(){\r\n                def.resolve();\r\n            });\r\n            return def.promise;\r\n        },\r\n        deleteBookmark: function(id_product){\r\n            var def = $q.defer();\r\n            var url = laroute.route('user.deleteBookmark', {'id_product':id_product});\r\n            $http.delete(url).then(function(){\r\n                def.resolve();\r\n            });\r\n            return def.promise;\r\n        }\r\n    });\r\n    return User;\r\n});","!function() {\r\n    setpoint.controller(\"ProdcutDetailsCtrl\", function($scope, Product, Color, $q) {\r\n        var loadProduct = Product.getById(window.product);\r\n        $scope.changeColor = function(id_color) {\r\n            Color.getById(id_color).then(function(color) {\r\n                console.log(color);\r\n            });\r\n        };\r\n        $scope.ok = function(img) {\r\n            $scope.selectedImg = img;\r\n            $scope.product.getImgs().then(function(img){\r\n                $scope.selectedImgs = img;\r\n            });   \r\n        }\r\n       \r\n        \r\n        loadProduct.then(function(product) {\r\n            $scope.product = product;\r\n            console.log($scope.product);\r\n            var loadColors = $scope.product.colors();\r\n            var loadSizes = $scope.product.sizes();\r\n            var loadImgs = $scope.product.getImgs();            \r\n            $q.all([loadColors, loadSizes, loadImgs]).then(function(data){\r\n                $scope.colors = data[0];\r\n                $scope.sizes = data[1];\r\n                $scope.imgs = data[2];\r\n                $scope.selectedImgs = $scope.imgs;\r\n            });\r\n        })\r\n        \r\n    });\r\n}();"],"sourceRoot":"/source/"}