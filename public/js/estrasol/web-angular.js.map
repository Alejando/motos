{"version":3,"sources":["app.js","directives/currencyOnly.js","directives/fileread.js","directives/numbersOnly.js","directives/owlCarousel.js","factory/ModelBase.js","factory/Models/BrandModel.js","factory/Models/CategoryModel.js","factory/Models/ColorModel.js","factory/Models/Paginacion.js","factory/Models/ProductoModel.js","factory/Models/ProfileModel.js","factory/Models/SizeModel.js","factory/Models/StockModel.js","factory/Models/UserModel.js","ProductDetailsCtrl.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC7CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjpgBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClhBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"web-angular.js","sourcesContent":["var setpoint = angular.module('setpoint', [\n    'slugifier',\n    'angular-owl-carousel'\n]);","//Fork of http://jsfiddle.net/jamseernj/6guy3sp9/\nsetpoint.directive('currencyOnly', function() {\n      return {\n        require: '?ngModel',\n        link: function(scope, element, attrs, ngModelCtrl) {\n          if(!ngModelCtrl) {\n            return; \n          }\n\n          ngModelCtrl.$parsers.push(function(val) {\n            if (angular.isUndefined(val)) {\n                var val = '';\n            }\n            \n            var clean = val.replace(/[^-0-9\\.]/g, '');\n            var negativeCheck = clean.split('-');\n\t\t\tvar decimalCheck = clean.split('.');\n            if(!angular.isUndefined(negativeCheck[1])) {\n                negativeCheck[1] = negativeCheck[1].slice(0, negativeCheck[1].length);\n                clean =negativeCheck[0] + '-' + negativeCheck[1];\n                if(negativeCheck[0].length > 0) {\n                \tclean =negativeCheck[0];\n                }\n                \n            }\n              \n            if(!angular.isUndefined(decimalCheck[1])) {\n                decimalCheck[1] = decimalCheck[1].slice(0,2);\n                clean =decimalCheck[0] + '.' + decimalCheck[1];\n            }\n\n            if (val !== clean) {\n              ngModelCtrl.$setViewValue(clean);\n              ngModelCtrl.$render();\n            }\n            return clean;\n          });\n\n          element.bind('keypress', function(event) {\n            if(event.keyCode === 32) {\n              event.preventDefault();\n            }\n          });\n        }\n      };\n  });","setpoint.directive(\"fileread\", [function () {\n    return {\n        scope: {\n            fileread: \"=\",\n            onselectfile: \"=\"\n        },\n        link: function (scope, element, attributes) {\n            element.bind(\"change\", function (changeEvent) {\n                \n                if(scope.onselectfile){\n                    scope.onselectfile(changeEvent,event.target.files);\n                }\n                if(event.target.files[0]){\n                    scope.fileread = event.target.files[0];\n                }\n//                var reader = new FileReader();\n//                reader.onload = function (loadEvent) {\n//                    scope.$apply(function () {\n//                        scope.fileread = loadEvent.target.result;\n//                    });\n//                }\n//                reader.readAsDataURL(changeEvent.target.files[0]);\n            });\n        }\n    }\n}]);\n\nsetpoint.directive('filesDagAndDrop',[\n    function (){\n        return {\n            scope : {\n                fileread: \"=\",\n                onselectfile: \"=\"\n            },\n            link : function(scope, element, attributes){\n                var inputFile = angular.element(\n                        '<input type=\"file\" multiple accept=\".jpg,.png\" style=\"display:none\">'\n                    );\n                element.append(inputFile);\n                \n                inputFile.bind('click', function(e) {\n                     e.stopPropagation();\n                });\n                \n                inputFile.bind('change', function(e) {\n                    scope.onselectfile(this.files);\n                    e.stopPropagation();\n                });\n                \n                element.bind('click', function ($event) {\n                    $(inputFile).click();\n                    $event.preventDefault();\n                });\n                \n                element.bind('drop',function($event) {                 \n                    scope.onselectfile($event.originalEvent.dataTransfer.files);\n                    $event.preventDefault();\n                });\n                \n                element.bind('dragover', function ($event) {\n                    $event.preventDefault();\n                });\n            }\n        }\n    }\n]);","//fork: http://codepen.io/apuchkov/pen/ILjFr\nsetpoint.directive('numbersOnly', function () {\n    return {\n        require: 'ngModel',\n        link: function (scope, element, attr, ngModelCtrl) {\n            function fromUser(text) {\n                if (text) {\n                    var transformedInput = text.replace(/[^0-9]/g, '');\n                    if (transformedInput !== text) {\n                        ngModelCtrl.$setViewValue(transformedInput);\n                        ngModelCtrl.$render();\n                    }\n                    return transformedInput;\n                }\n                return undefined;\n            }            \n            ngModelCtrl.$parsers.push(fromUser);\n        }\n    };\n});","//http://embed.plnkr.co/pOIh2mOkj9N5HajbiC9h/\nsetpoint.directive(\"owlCarousel\", function() {\n\treturn {\n\t\trestrict: 'E',\n\t\ttransclude: false,\n\t\tlink: function (scope) {\n\t\t\tscope.initCarousel = function(element) {\n\t\t\t  // provide any default options you want\n\t\t\t\tvar defaultOptions = {\n\t\t\t\t};\n\t\t\t\tvar customOptions = scope.$eval($(element).attr('data-options'));\n\t\t\t\t// combine the two options objects\n\t\t\t\tfor(var key in customOptions) {\n\t\t\t\t\tdefaultOptions[key] = customOptions[key];\n\t\t\t\t}\n\t\t\t\t// init carousel\n\t\t\t\t$(element).owlCarousel(defaultOptions);\n\t\t\t};\n\t\t}\n\t};\n})\n.directive('owlCarouselItem', [function() {\n\treturn {\n\t\trestrict: 'A',\n\t\ttransclude: false,\n\t\tlink: function(scope, element) {\n\t\t  // wait for the last item in the ng-repeat then call init\n\t\t\tif(scope.$last) {\n\t\t\t\tscope.initCarousel(element.parent());\n\t\t\t}\n\t\t}\n\t};\n}]);\n","setpoint.factory('ModelBase', function (Paginacion, $q, $http, $timeout, $interval, $filter) {\n    //<editor-fold defaultstate=\"collapsed\" desc=\"constructor\">\n    var ModelBase = function (args) {\n        this.setProperties(args);\n        this.relations = {};\n        this._bk_attrs = {};\n        this._FILES = false;\n    };\n    //</editor-fold>\n    //<editor-fold defaultstate=\"collapsed\" desc=\"Metodos de Instancia (prototype)\">\n    ModelBase.prototype = {\n        addFile : function (name, data) {\n            if(!this._FILES){\n                this._FILES = {};\n            }\n            this._FILES[name] = data;\n        },\n        backup : function() {\n            var self = this;\n            var attributes = self.model().attributes; \n            angular.forEach(attributes, function(attr){\n                self._bk_attrs[attr] = self[attr];\n            });\n            return this;\n        },\n        rollback : function() {\n            var self = this;\n            angular.forEach(self._bk_attrs, function(i ,attr){\n                self[attr] = self._bk_attrs[attr];\n            });\n            return this;\n        },\n        //<editor-fold defaultstate=\"collapsed\" desc=\"setProperties\">\n        setProperties: function (data) {            \n            var self = this;\n            var atributes = self.model().attributes; \n            var setters = self.model().setters;\n            angular.forEach(atributes, function (attr) {\n                if(setters && setters[attr]){\n                    self[attr] = setters[attr].apply(self,[data[attr]]);\n                    return;\n                }\n                self[attr] = data[attr];\n            });\n        },\n        selfUpdate : function (milisecons, $scope) {  \n            var self = this;\n            $interval(function() {\n                console.log(\"Inicia --- re\", milisecons);\n                self.refresh();\n            },milisecons);            \n        },\n        refresh : function () {\n            var data = {};\n            var self = this;\n            var $defer =  $q.defer();\n            var model = this.model();\n            data[model.aliasUrl()] = this.id;\n            var url = laroute.route(model.aliasUrl() + '.show', data);            \n            $http({\n                'method' : 'GET',\n                'url' : url\n            }).then(function(result) {\n                self.setProperties(result.data);\n            }, function(r) {                \n                $defer.reject(r);\n            });\n            return $defer;\n        },\n        getProperties : function () {\n            var self = this;\n            var data = {};\n            var attributes = self.model().attributes;\n            angular.forEach(attributes, function (attr){\n                data[attr] = self[attr];\n            });\n            return data;\n        },\n        create : function () {\n            var  data = this.getProperties();\n            var model = this.model();\n            var self = this;\n            var url = laroute.route(model.aliasUrl());        \n            var $defer = $q.defer();\n            $http({\n                'method' : 'POST',\n                'data' : data,\n                'url' : url\n            }).then(function(result) {\n                self.setProperties(result.data.model);\n                instancias =model.model().addCache(self);\n                $defer.resolve(model);\n            },function(r){\n                $defer.reject(r);\n            });\n            return $defer.promise;\n        },\n        update : function () {\n            var self = this;\n            var data = {};\n            var atributes = self.model().attributes; \n            var preparers = self.model().preparers;\n            angular.forEach(atributes, function (attr) {\n                if(preparers && preparers[attr]){\n                    console.log(attr);\n                    data[attr] = preparers[attr].apply(self,[self[attr]]);\n                    return;\n                }\n                data[attr] = self[attr];\n            });\n            var alias= this.model().alias;\n            var relations = this.model().conf_relations;\n            angular.forEach(relations, function (conf, relation) {\n                if(conf[ModelBase.RELATIONS.FUNCTION] === \"hasMany\") {\n                    data[relation] = [];\n                    angular.forEach(self[relation + \"_ids\"], function(item){\n                        data[relation].push(item);\n                    });\n                } else if(conf[ModelBase.RELATIONS.FUNCTION] ==='x') {\n                    \n                }\n            });\n            \n            var datalaroute = {};\n            datalaroute[alias] = this.id;\n            var url = laroute.route(alias+'.update', datalaroute);\n            var $def = $q.defer();\n            $http({\n                url : url,\n                method : 'PUT',\n                data : data\n            }).then(function(r){\n                $def.resolve(r.data);\n            });\n            return $def.promise;\n        },\n        saveWithFiles : function () {\n            var $def = $q.defer();\n            var self = this;\n            var fd = new FormData();\n            var model = this.model();\n            var data = this.getProperties();\n            var url = laroute.route(model.aliasUrl()); \n            angular.forEach(this._FILES,function(file, name) { \n                fd.append(name, file);\n            });\n            var relations = this.model().conf_relations;\n            angular.forEach(relations, function (conf, relation) {\n                if(conf[ModelBase.RELATIONS.FUNCTION] === \"hasMany\") {\n                    angular.forEach(self[relation+\"_ids\"], function(item){\n                        fd.append(relation + \"[]\", item);\n                    });\n                } else if(conf[ModelBase.RELATIONS.FUNCTION] ==='x') {\n                    \n                }\n            });\n            angular.forEach(data, function (value, field) {\n                if(value!==undefined) {\n                    if(angular.isArray(value)){\n                        angular.forEach(value,function(item) {\n                            fd.append(field+\"[]\", item);\n                        });\n                    } else {\n                        fd.append(field, value);  \n                    }\n                }\n            }); \n            $http.post(url,fd, {\n                transformRequest: angular.identity,\n                headers: {'Content-Type': undefined}\n            }).success(function(){\n                $def.resolve();\n            }).error(function(){\n                $def.reject() \n           });\n            return $def.promise;\n        },\n        save : function () {\n            if(this._FILES) {\n                return this.saveWithFiles();\n            }\n            if(this.id){\n                return this.update();\n            }\n            return this.create();\n        \n        },\n        detach : function (strRelation, entity) {\n            var fn = this.model().conf_relations[strRelation][ModelBase.RELATIONS.FUNCTION];\n            if(fn === \"hasMany\"){\n                var index = this.relations[strRelation].indexOf(entity);\n                if(index != -1) {\n                    this.relations[strRelation].splice(index,1);\n                }\n                index = this[strRelation + \"_ids\"].indexOf(entity.id);\n                if(index !=-1) {\n                    this[strRelation + \"_ids\"].splice(index,1);\n                }\n            }else {\n                throw Error(strRelation + \" Fn no implementada\");\n            }\n            return this;\n        },\n        relate : function (strRelation, entity) {\n            var fn = this.model().conf_relations[strRelation][ModelBase.RELATIONS.FUNCTION];\n            if(fn === \"hasMany\"){\n                if(this.relations[strRelation]==undefined) {\n                    this.relations[strRelation] = [];\n                    this[strRelation + \"_ids\"] = [];\n                }\n                this.relations[strRelation].push(entity);\n                this[strRelation + \"_ids\"].push(entity.id);\n            } else if(fn === \"belongsTo\") {\n                this.relations[strRelation] = entity;\n                this[strRelation +\"_id\"] = entity.id;\n            } else {\n                throw Error(strRelation + \" Fn no implementada\");\n            }\n            return this;\n        },\n        remove : function() {\n            var model = this.model();\n            var url = laroute.route(model.aliasUrl())+\"/\"+this.id;        \n            var $defer = $q.defer();\n            $http({\n                'method' : 'DELETE',\n                'url' : url\n            }).then(function(result) {\n                //Todo implemenetar elminar de cache\n                $defer.resolve(result);\n            },function(r){\n                $defer.reject(r);\n            });\n            return $defer.promise;\n        },\n        getter : function (key){\n            return this[\"_obj_\" + key];\n        },\n        hasMany : function (Model, key) {\n            var self = this;\n            var defer = $q.defer();\n            if(self.id){\n                var url = laroute.route(self.model().aliasUrl()  + '.relation',{\n                    'id' : self.id,\n                    'relation' :  key\n                });\n                $http({\n                    'method' : 'GET',\n                    'url' : url\n                }).then(function(result){                \n                    var arrIds = [];\n                    var instancias = Model.build(result.data, function(obj){\n                        arrIds.push(obj.id);\n                    });\n                    self.relations[key] = instancias;\n                    self[key+\"_ids\"] = arrIds;\n                    defer .resolve(instancias);                                \n                },function(r) {                \n                    defer .reject(r);\n                });\n            } else {\n                $timeout(function(){\n                    defer .resolve([]);\n                });\n            }\n            return defer.promise;\n        },\n        belongsTo : function (Model, key) {\n            console.log(\"ok\");\n            var self = this;\n            var defer = $q.defer();\n            var id = this[key + \"_id\"];\n            if(id) {\n                Model.getById(id).then(function(entidad) {                                  \n                    self.relations[key] = entidad;                         \n                    defer.resolve(entidad);\n                }, function(r){\n                    defer.reject(r);\n                });\n            } else {\n                $timeout(function() {\n                    defer.reject();\n                }, 10);\n            }\n            \n            return defer.promise;\n        }\n        //</editor-fold>\n    };\n    //</editor-fold>\n    //<editor-fold defaultstate=\"collapsed\" desc=\"Metodos Estaticos\">\n    ModelBase.findCache = function(obj){        \n        var cache = this.model().cache;                       \n        obj = cache[obj.id];\n        if(obj){\n            return obj;\n        } else {\n            return false;\n        }\n    };\n    ModelBase.setFloat = function (value) {\n        if(value){\n            return parseFloat(value);\n        }\n        return undefined;\n    },\n    //Helper para setear fechas \n   \n    ModelBase.setDate = function (value) {\n        if(angular.isString(value)) {\n            var date = new Date(value);\n            if(isNaN(date.getTime())){\n                return null;\n            }\n            return date;\n        }\n        return value;\n    };\n    ModelBase.prepareDate = function (date){\n        var dateTemp = new Date(date);\n        dateTemp.setHours(0);\n        dateTemp.setMinutes(0);\n        dateTemp.setSeconds(0);\n        if(dateTemp.getTime && !isNaN(dateTemp.getTime())){\n            return $filter('date')(dateTemp,'yyyy-MM-ddTHH:mm:ssZ');;\n        } else {\n            return undefined;\n        }\n    };\n    ModelBase.model = function () {\n        return this.prototype.model();\n    };\n    ModelBase.getCache = function () {\n        return this.cache;\n    };    \n    ModelBase.RELATIONS = {\n        KEY : 0,\n        MODEL : 1,\n        FUNCTION : 2\n    };\n    \n    ModelBase.addRelation = function (key, fnModel, fn) {\n        var model = this.model();        \n        if(angular.isString(fn)){//funciones de relaciones por defecto                \n            switch(fn){\n                case 'belongsTo' :\n                    fn = function () {                           \n                        return this.belongsTo(fnModel, key);\n                    };\n                    model.attributes.push(key + \"_id\");\n                    break;\n                case 'hasMany' : \n                    fn = function () {                              \n                        return this.hasMany(fnModel, key);\n                    };\n                break;\n            }                \n        } \n        model.prototype[key] = fn;\n    };\n    \n    ModelBase.createModel = function (model, statics, prototype) {\n        angular.extend(model.prototype, ModelBase.prototype, prototype);\n        angular.extend(model, ModelBase, statics);\n        model.prototype.model = function () {            \n            return model;\n        };\n        model.cache = [];\n        model.conf_relations = {};\n        angular.forEach(model.relations, function(v){            \n            var key = v[ModelBase.RELATIONS.KEY];            \n            var fn = v[ModelBase.RELATIONS.FUNCTION];\n            var fnModel = v[ModelBase.RELATIONS.MODEL];\n            model.addRelation(key,fnModel,fn);\n            model.conf_relations[key] = v;\n        });\n//        console.log(\"models->\"+model.attributes);\n        return model;\n    };\n    ModelBase.aliasUrl = function () {\n        return this.alias;\n    };\n    ModelBase.addCache = function(obj) {        \n        var Model = this.model();        \n        var cache = Model.getCache();\n        cache[obj.id] = obj;        \n        return obj;\n    };\n    //<editor-fold defaultstate=\"collapsed\" desc=\"build\">\n    ModelBase.build = function (data, fnSteep) {        \n        if(fnSteep === undefined) {\n            fnSteep = $.noop;\n        }\n        var Model = this.model(), obj;\n        if (angular.isArray(data)) {            \n            var arrInst = [];\n            var i = 0;\n            angular.forEach(data, function (d) {                \n                obj = Model.findCache(d);                                \n                if(obj) {\n                    obj.setProperties(d);\n                    arrInst.push(obj);\n                    i++;\n                } else {\n                    obj = Model.addCache(new Model(d));  \n                    arrInst.push(obj);\n                }\n                fnSteep(obj);\n            });\n            return arrInst;\n        }\n        obj = Model.findCache(data);\n        if(!obj) {                   \n            obj = Model.addCache(new Model(data));\n        }\n        fnSteep(obj);\n        return obj;\n    };\n    //</editor-fold>\n    //<editor-fold defaultstate=\"collapsed\" desc=\"getAll\">\n    ModelBase.getAll = function () {\n        var self = this.model();\n        var url = laroute.route(this.aliasUrl());        \n        var $defer = $q.defer();\n        $http({\n            'method' : 'GET',\n            'params' : {\n                'paginacion' : false\n            },\n            'url' : url\n        }).then(function(result) {\n            var instancias =self.model().build(result.data);\n            $defer.resolve(instancias);\n        },function(r){\n            $defer.reject(r);\n        });\n        return $defer.promise;\n    };\n    //</editor-fold>\n    //<editor-fold defaultstate=\"collapsed\" desc=\"paginado\">\n    ModelBase.paginado = function () {            \n        var self = this;        \n        var url = laroute.route(this.aliasUrl());\n        var $defer = $q.defer();        \n        $http({\n            'method' : 'GET',\n            'params' : { \n                'paginacion' : true\n            },\n            'url' : url\n        }).then(function(result) {\n            var arrInst = [], pojsos, paginacion;            \n                pojsos = result.data.data;\n                paginacion = new Paginacion.build(result.data, self.model());\n            $defer.resolve({\n                'instancias': arrInst,\n                'paginacion' : paginacion\n            });\n        });\n        return $defer.promise;\n    };\n    //</editor-fold>\n    //<editor-fold defaultstate=\"collapsed\" desc=\"getURLForAllDataTables\">\n    ModelBase.getURLForAllDataTables = function () {\n        var self = this;\n        var url = laroute.route(self.model().aliasUrl()  + '.all-for-datatables', {});\n        return url;\n    };\n    //</editor-fold>\n    //<editor-fold defaultstate=\"collapsed\" desc=\"getallForDataTables\">\n    ModelBase.getAllForDataTables = function() {\n        var self = this;\n        var url = self.getURLForAllDataTables();\n        var $defer = $q.defer();\n        $http({\n            'method' : 'GET',\n            'url' : url\n        }).then(function(result) {\n            $defer.resolve(result.data);\n        });\n        return $defer.promise;\n    };\n    //</editor-fold>\n    //<editor-fold defaultstate=\"collapsed\" desc=\"getById\">\n    ModelBase.getById = function(id, args) {        \n        var data = angular.extend(args || {} , {\n            id : id\n        });        \n        var self = this; \n        var $defer = $q.defer();                \n        var objCache = self.model().findCache(data);     \n//        console.log(objCache);\n        if(objCache !== false) {\n            $timeout(function() {\n                $defer.resolve(objCache);\n            }, 10);\n        } else {   \n            data = {};\n            data[this.aliasUrl()] = id;\n            var url = laroute.route(this.aliasUrl() + '.show', data);            \n            $http({\n                'method' : 'GET',\n                'url' : url\n            }).then(function(result) {\n                var instancias = self.model().build(result.data);\n                $defer.resolve(instancias);\n            }, function(r) {                \n                $defer.reject(r);\n            });\n        }\n        return $defer.promise;\n    };\n    //</editor-fold>\n    //</editor-fold>\n    return ModelBase;\n});\n","setpoint.factory('Brand', function (ModelBase,$q,$http, Slug) {    \n    var Brand = function (args) {\n        ModelBase.apply(this, arguments);\n    };\n    ModelBase.createModel(Brand , {   \n        alias: 'brand',\n        setters : {\n        },\n        attributes: [\n            'id',\n            'name'\n        ],\n        relations : []\n    }, {\n        getLogo : function (w, h) {\n            var url = laroute.route('brand.getLogo',{\n                slugSEO : Slug.slugify(this.name) + \"-\",\n                id : this.id,\n                width : w,\n                heigth :  h\n            });\n            return url;\n        }\n    });\n    return Brand;\n});","setpoint.factory('Category', function (ModelBase,$q,$http) {    \n    var Category = function (args) {\n        ModelBase.apply(this, arguments);\n    };\n    ModelBase.createModel(Category , {   \n        alias: 'category',\n        setters : {\n        },\n        attributes: [\n            'id',\n            'name',\n            'parent_category_id'\n        ],\n        relations : []\n    }, {\n    });\n    return Category;\n});","setpoint.factory('Color', function (ModelBase,$q,$http) {    \n    var Color = function (args) {\n        ModelBase.apply(this, arguments);\n    };\n    ModelBase.createModel(Color , {   \n        alias: 'color',\n        setters : {\n        },\n        attributes: [\n            'id',\n            'name',\n            'pref',\n            'rgb'\n        ],\n        relations : []\n    }, {\n    });\n    return Color;\n});","/* global angular, glimglam */\nsetpoint.factory('Paginacion', function () {\n    var Paginacion = function (args) {        \n        this.setPropieties(args);\n    };\n    //Se hereda el prototipo base y se agregan los metodos personalizados\n    Paginacion.prototype = {\n        setPropieties: function (data) {            \n            var self = this;\n            var atributes = this.getAttributes();\n            angular.forEach(atributes, function (value) {                \n                self[value] = data[value];\n            });\n        },\n        getAttributes: function () {\n            return [\n                'current_page',\n                'from',\n                'last_page',\n                'next_page_url',\n                'per_page',\n                'prev_page_url',\n                'to',\n                'total'\n            ];\n        }\n    };\n    Paginacion.build = function (data) {        \n        return new Paginacion(data);\n    };\n    return Paginacion;\n});","setpoint.factory('Product', function (ModelBase,$q,$http, Category, Color, Brand, Size) {\n    var Product = function (args) {\n        ModelBase.apply(this, arguments);\n    };\n    ModelBase.createModel(Product , {\n        alias: 'product',\n        setters : {\n        },\n        attributes: [\n            'id',\n            'name',\n            'code',\n            'slug',\n            'codebar',\n            'description',\n            'multi_galeries',\n//            'colors',\n//            'categoriesC',\n            'brand_id'\n        ],\n        relations : [\n            ['categories', Category, 'hasMany'],\n            ['sizes', Size, 'hasMany'],\n            ['colors', Color, 'hasMany'],\n            ['brand', Brand, 'belongsTo']\n        ],\n    }, {\n        renameImg : function () {\n            var $defer = $q.defer();\n            var url = laroute.route('product.renameImg', {\n                'id' : this.id\n            });\n            $http.put(url,{\n                img : img,\n                name : name\n            }).then(function (request){\n//                console.log(request);\n            });\n            $defer.promise;\n        },\n        removeImg : function (img) {\n            var $defer = $q.defer();\n            var url = laroute.route('product.getImgs', {\n                'id' : this.id\n            });\n            $http.delete(url,{\n                img : img\n            }).then(function (request){\n//                console.log(request);\n            });\n            $defer.promise;\n        },\n        getImg : function (img, width, height) {\n            var url = laroute.route('product.img', {\n                id : this.id,\n                width : width,\n                height: height,\n                img : img\n            });\n//            console.log(url);\n            return url;\n        },\n        getImgs : function () {\n            var $defer = $q.defer();\n            var url = laroute.route('product.getImgs', {\n                'id' : this.id\n            });\n            var self = this;\n            $http.get(url).then(function (request){\n                self.imgs = request.data;\n                $defer.resolve(request.data);\n            });\n            return $defer.promise;\n        }\n    });\n    return Product;\n});\n","setpoint.factory('Profile', function (ModelBase, $q, $http) {    \n    var Profile = function (args) {\n        ModelBase.apply(this, arguments);\n    };\n    ModelBase.createModel(Profile , {\n        alias: 'size',\n        setters : {\n        },\n        attributes: [\n            'id',\n            'name'\n        ],\n        relations : []\n    }, {\n    });\n    return Profile;\n});","setpoint.factory('Size', function (ModelBase,$q,$http) {    \n    var Size = function (args) {\n        ModelBase.apply(this, arguments);\n    };\n    ModelBase.createModel(Size , {   \n        alias: 'size',\n        setters : {\n        },\n        attributes: [\n            'id',\n            'name'\n        ],\n        relations : []\n    }, {\n    });\n    return Size;\n});","setpoint.factory('Stock', function (ModelBase, $q, $http,\n    Product,\n    Color, \n    Size) {    \n    var Stock = function (args) {\n        ModelBase.apply(this, arguments);\n    };\n    ModelBase.createModel(Stock , {   \n        alias: 'stock',\n        setters : {\n        },\n        attributes: [\n            'id',\n            'quantity',\n            'price',\n            'code'\n        ],\n        relations : [\n            ['product', Product, 'belongsTo'],\n            ['color', Color, 'belongsTo'],\n            ['size', Size, 'belongsTo']\n        ]\n    }, {\n    });\n    return Stock;\n});","setpoint.factory('User', function (ModelBase, $q, $http) {    \n    var User = function (args) {\n        ModelBase.apply(this, arguments);\n    };\n    ModelBase.createModel(User , {   \n        alias: 'user',\n        setters : {\n        },\n        attributes: [\n            'id',\n            'name',\n            'email',\n            'password',\n            'profile'\n        ],\n        relations : []\n    }, {\n        addBookmark: function(id_product){\n            var def = $q.defer();\n            var url = laroute.route('user.addBookmark', {'id_product':id_product});\n            $http.post(url).then(function(){\n                def.resolve();\n            });\n            return def.promise;\n        },\n        deleteBookmark: function(id_product){\n            var def = $q.defer();\n            var url = laroute.route('user.deleteBookmark', {'id_product':id_product});\n            $http.delete(url).then(function(){\n                def.resolve();\n            });\n            return def.promise;\n        }\n    });\n    return User;\n});","!function() {\n    setpoint.controller(\"ProdcutDetailsCtrl\", function($scope, Product, Color, $q) {\n        var loadProduct = Product.getById(window.product);\n        $scope.changeColor = function(id_color) {\n            Color.getById(id_color).then(function(color) {\n                console.log(color);\n            });\n        };\n        $scope.ok = function(img) {\n            $scope.selectedImg = img;\n            $scope.product.getImgs().then(function(img){\n                $scope.selectedImgs = img;\n            });   \n        }\n       \n        \n        loadProduct.then(function(product) {\n            $scope.product = product;\n            console.log($scope.product);\n            var loadColors = $scope.product.colors();\n            var loadSizes = $scope.product.sizes();\n            var loadImgs = $scope.product.getImgs();            \n            $q.all([loadColors, loadSizes, loadImgs]).then(function(data){\n                $scope.colors = data[0];\n                $scope.sizes = data[1];\n                $scope.imgs = data[2];\n                $scope.selectedImgs = $scope.imgs;\n            });\n        })\n        \n    });\n}();"],"sourceRoot":"/source/"}